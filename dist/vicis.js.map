{"version":3,"file":"vicis.js","sources":["../src/const/typesList.mjs","../node_modules/@corefunc/corefunc/array/basic/intersect.mjs","../node_modules/@corefunc/corefunc/array/get/difference.mjs","../node_modules/@corefunc/corefunc/array/basic/hasSame.mjs","../node_modules/@corefunc/corefunc/check/isObjectLike.mjs","../node_modules/@corefunc/corefunc/is/function.mjs","../node_modules/@corefunc/corefunc/object/get/keys.mjs","../node_modules/@corefunc/corefunc/object/get/property.mjs","../src/const/configFields.mjs","../node_modules/@corefunc/corefunc/is/string.mjs","../node_modules/@corefunc/corefunc/object/is/empty.mjs","../src/util/json/stringify.mjs","../src/core/cast/castConfig.mjs","../node_modules/@corefunc/corefunc/cast/to/string.mjs","../src/const/typesEnum.mjs","../src/util/json/parse.mjs","../src/util/object/toPlain.mjs","../src/util/object/deserialize.mjs","../src/util/object/serialize.mjs","../src/core/cast/castData.mjs","../node_modules/@corefunc/corefunc/convert/to/flag.mjs","../src/util/cast/toJson.mjs","../src/const/configSort.mjs","../node_modules/@corefunc/corefunc/object/keys/sort.mjs","../src/util/variable/cloneDeep.mjs","../src/util/variable/clone.mjs","../node_modules/@corefunc/corefunc/check/isPrimitive.mjs","../src/core/defaults/defaultsConfig.mjs","../src/core/defaults/defaultsData.mjs","../node_modules/@corefunc/corefunc/array/get/unique.mjs","../node_modules/@corefunc/corefunc/array/is/empty.mjs","../src/core/defined/definedConfig.mjs","../src/core/defined/definedData.mjs","../node_modules/@corefunc/corefunc/is/regexp.mjs","../src/core/exclude/excludeConfig.mjs","../src/core/omit/omitConfig.mjs","../src/core/order/orderConfig.mjs","../node_modules/@corefunc/corefunc/object/keys/order.mjs","../src/core/pick/pickConfig.mjs","../src/core/pick/pickData.mjs","../src/core/rename/renameConfig.mjs","../src/core/rename/renameData.mjs","../src/core/replace/replaceConfig.mjs","../src/core/replace/replaceData.mjs","../src/core/required/requiredConfig.mjs","../src/core/required/requiredData.mjs","../src/core/transform/transformConfig.mjs","../node_modules/@corefunc/corefunc/check/isCallable.mjs","../src/core/transform/transformData.mjs","../src/core/parameter.mjs","../src/core/functionToConfig.mjs","../src/core/errors/AggregateError.mjs","../src/core/errors/ValidationError.mjs","../src/core/Vicis.mjs","../src/core/omit/omitData.mjs","../src/core/exclude/excludeData.mjs","../src/core/order/orderData.mjs","../src/core/cast/cast.mjs","../src/core/defaults/defaults.mjs","../src/core/defined/defined.mjs","../src/core/exclude/exclude.mjs","../src/core/omit/omit.mjs","../src/core/order/order.mjs","../src/core/pick/pick.mjs","../src/core/rename/rename.mjs","../src/core/replace/replace.mjs","../src/core/required/required.mjs","../src/core/transform/transform.mjs"],"sourcesContent":["const TYPES_LIST = [\"boolean\", \"flag\", \"numeric\", \"integer\", \"string\", \"json\"];\n\nexport default TYPES_LIST;\n","/**\n * @name arrayBasicIntersect\n * @param {Array} alpha\n * @param {Array} beta\n * @returns {Array}\n */\nexport default function arrayBasicIntersect(alpha, beta) {\n  if (!alpha.length || !beta.length) {\n    return [];\n  }\n  const setB = new Set(beta);\n  return [...new Set(alpha)].filter((value) => setB.has(value));\n}\n","export default function arrayGetDifference(alpha, beta) {\n  const set = new Set(beta);\n  return alpha.filter((value) => !set.has(value));\n}\n","/**\n * @name arrayHasSame\n * @param {Array} alpha\n * @param {Array} beta\n * @returns {boolean}\n */\nexport default function arrayHasSame(alpha, beta) {\n  if (!alpha.length || !beta.length) {\n    return false;\n  }\n  const setB = new Set(beta);\n  return Boolean([...new Set(alpha)].filter((x) => setB.has(x)).length);\n}\n","/**\n * @name checkIsObjectLike\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example isObjectLike({}); ➜ true\n * @example isObjectLike([1, 2, 3]); ➜ true\n * @example isObjectLike(() => {}); ➜ false\n * @example isObjectLike(null); ➜ false\n */\nexport default function checkIsObjectLike(value) {\n  return value && typeof value === \"object\" && !Array.isArray(value);\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isFunction(value) {\n  if (Object.prototype.toString.call(value) !== \"[object Function]\") {\n    return false;\n  }\n  return !/^class\\s/.test(Function.prototype.toString.call(value));\n}\n","/**\n * @name objectGetKeys\n * @param {Object} object\n * @returns {Array.<string>}\n */\nexport default function objectGetKeys(object) {\n  return Object.keys(object).sort((alpha, beta) => alpha.localeCompare(beta));\n}\n","export default function objectGetProperty(object, key, defaultvalue) {\n  if (key in object) {\n    return object[key];\n  }\n  return defaultvalue;\n}\n","const CONFIG_FIELDS = [\n  \"cast\",\n  \"defaults\",\n  \"defined\",\n  \"exclude\",\n  \"omit\",\n  \"order\",\n  \"pick\",\n  \"sort\",\n  \"rename\",\n  \"replace\",\n  \"required\",\n  \"transform\",\n];\n\nexport default CONFIG_FIELDS;\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isString(value) {\n  return typeof value === \"string\";\n}\n","/**\n * @param {Object} object\n * @returns {boolean}\n */\nexport default function objectIsEmpty(object) {\n  return Object.keys(object).length === 0;\n}\n","/**\n * @name jsonStringify\n * @param {*} value\n * @returns string\n */\nexport default function jsonStringify(value) {\n  return JSON.stringify(value);\n}\n","import checkIsObjectLike from \"@corefunc/corefunc/check/isObjectLike\";\nimport isString from \"@corefunc/corefunc/is/string\";\nimport objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\nimport TYPES_LIST from \"../../const/typesList\";\n\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name castConfig\n * @throws TypeError\n * @param {Object.<string, string>} propertyToType\n * @returns {Object}\n */\nexport default function castConfig(propertyToType) {\n  if (!checkIsObjectLike(propertyToType)) {\n    throw new TypeError(\"Cast should be an object\");\n  }\n  if (objectIsEmpty(propertyToType)) {\n    return {};\n  }\n  Object.keys(propertyToType).forEach((key) => {\n    if (!isString(propertyToType[key])) {\n      throw new TypeError(\n        `'Cast' expect object values to be strings. Not a string at key: '${jsonStringify(propertyToType[key])}'.`,\n      );\n    }\n    if (!TYPES_LIST.includes(propertyToType[key])) {\n      throw new TypeError(`'Cast' has unknown type in {${key}: \"${propertyToType[key]}\"}.`);\n    }\n  });\n  return propertyToType;\n}\n","/**\n * @param {*} value\n * @returns string\n */\nexport default function castToString(value) {\n  if (value === null || value === undefined) {\n    return \"\";\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  const result = value.toString();\n  if (result === \"0\" && Object.is(value, -0)) {\n    return \"-0\";\n  }\n  return result;\n}\n","const TYPES_ENUM = {\n  BOOLEAN: \"boolean\",\n  FLAG: \"flag\",\n  NUMERIC: \"numeric\",\n  INTEGER: \"integer\",\n  STRING: \"string\",\n  JSON: \"json\",\n};\n\nexport default TYPES_ENUM;\n","/**\n * @name jsonParse\n * @param {string} text\n * @returns *\n */\nexport default function jsonParse(text) {\n  return JSON.parse(text);\n}\n","import objectDeserialize from \"./deserialize\";\nimport objectSerialize from \"./serialize\";\n\n/**\n * @name objectToPlain\n * @param {object|string} value\n * @returns {*}\n */\nexport default function objectToPlain(value) {\n  return objectDeserialize(objectSerialize(value));\n}\n","import isString from \"@corefunc/corefunc/is/string\";\n\nimport jsonParse from \"../json/parse\";\n\n/**\n * @name objectDeserialize\n * @param {string} value\n * @returns {*}\n */\nexport default function objectDeserialize(value) {\n  if (isString(value)) {\n    return jsonParse(value);\n  }\n  return value;\n}\n","import isFunction from \"@corefunc/corefunc/is/function\";\nimport isString from \"@corefunc/corefunc/is/string\";\n\nimport jsonStringify from \"../json/stringify\";\n\n/**\n * @name objectSerialize\n * @param {object|string} value\n * @returns {string}\n */\nexport default function objectSerialize(value) {\n  let data;\n  const { toJSON, toObject } = value;\n  if (isFunction(toObject)) {\n    data = value.toObject();\n  } else if (isFunction(toJSON)) {\n    data = value.toJSON();\n  } else {\n    data = value;\n  }\n  if (isString(data)) {\n    return data;\n  }\n  return jsonStringify(data);\n}\n","import castToString from \"@corefunc/corefunc/cast/to/string\";\nimport convertToFlag from \"@corefunc/corefunc/convert/to/flag\";\nimport objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\nimport TYPES_ENUM from \"../../const/typesEnum\";\n\nimport objectToPlain from \"../../util/object/toPlain\";\n\n/**\n * @name castData\n * @param {Object.<string, string>} propertyToType\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function castData(propertyToType, dataToSerialize) {\n  if (objectIsEmpty(propertyToType)) {\n    return dataToSerialize;\n  }\n  Object.keys(propertyToType).forEach((key) => {\n    const castTo = propertyToType[key];\n    if (!(key in dataToSerialize)) {\n      throw new Error(`Field '${key}' suppose to be converted to ${castTo}.`);\n    }\n    switch (castTo) {\n      case TYPES_ENUM.BOOLEAN:\n        dataToSerialize[key] = Boolean(dataToSerialize[key]);\n        break;\n      case TYPES_ENUM.FLAG:\n        dataToSerialize[key] = convertToFlag(dataToSerialize[key]);\n        break;\n      case TYPES_ENUM.NUMERIC: {\n        const castedNumber = Number(dataToSerialize[key]);\n        if (Number.isFinite(castedNumber)) {\n          dataToSerialize[key] = castedNumber;\n        } else {\n          const parsed = Number.parseFloat(castToString(dataToSerialize[key]).trim());\n          if (Number.isFinite(parsed)) {\n            dataToSerialize[key] = parsed;\n          } else {\n            dataToSerialize[key] = 0;\n          }\n        }\n        break;\n      }\n      case TYPES_ENUM.INTEGER: {\n        const castedInteger = Number(dataToSerialize[key]);\n        if (Number.isFinite(castedInteger)) {\n          dataToSerialize[key] = Math.trunc(castedInteger);\n        } else {\n          const parsed = Number.parseFloat(castToString(dataToSerialize[key]).trim());\n          if (Number.isFinite(parsed)) {\n            dataToSerialize[key] = Math.trunc(castedInteger);\n          } else {\n            dataToSerialize[key] = 0;\n          }\n        }\n        break;\n      }\n      case TYPES_ENUM.STRING:\n        dataToSerialize[key] = castToString(dataToSerialize[key]);\n        break;\n      case TYPES_ENUM.JSON:\n        dataToSerialize[key] = objectToPlain(dataToSerialize[key]);\n        break;\n      default:\n        throw new Error(\"Unknown value convert error\");\n    }\n  });\n  return dataToSerialize;\n}\n","/**\n * @name convertToFlag\n * @description\n * Turns: undefined, null, 0, 0n, \"\", \"false\", \"FALSE\" to boolean false.\n * Turns: 1, 1n, \"1\", \"true\", \"TRUE\" to boolean true.\n * @param {*} value\n * @param {*=false} onEmpty\n * @param {*=false} onUnParsable\n * @returns {boolean}\n */\nexport default function convertToFlag(value, onEmpty = false, onUnParsable = false) {\n  if (value === undefined || value === null) {\n    return onEmpty;\n  }\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n  const affirmative = value.toString().toLocaleLowerCase().trim();\n  if (affirmative.length === 0) {\n    return onEmpty;\n  }\n  if (affirmative === \"true\" || affirmative === \"1\") {\n    return true;\n  }\n  if (affirmative === \"false\" || affirmative === \"0\") {\n    return false;\n  }\n  return onUnParsable;\n}\n","import objectKeysSort from \"@corefunc/corefunc/object/keys/sort\";\n\nimport CONFIG_SORT from \"../../const/configSort\";\n\nimport jsonParse from \"../json/parse\";\nimport jsonStringify from \"../json/stringify\";\n\n/**\n * @name castToJson\n * @param {*} value\n * @param {boolean=} sort\n * @returns {*}\n */\nexport default function castToJson(value, sort = CONFIG_SORT) {\n  if (sort) {\n    return objectKeysSort(jsonParse(jsonStringify(value)), true);\n  } else {\n    return jsonParse(jsonStringify(value));\n  }\n}\n","const CONFIG_SORT = false;\n\nexport default CONFIG_SORT;\n","/**\n * @name objectKeysSort\n * @param {*} instance\n * @param {boolean=true} isDeep\n * @returns {*}\n */\nexport default function objectKeysSort(instance, isDeep = true) {\n  if (!instance || typeof instance !== \"object\" || Array.isArray(instance)) {\n    return instance;\n  }\n  const keys = Object.keys(instance);\n  if (!keys.length) {\n    return instance;\n  }\n  return keys.reduce((sorted, key) => {\n    if (isDeep && instance[key] && typeof instance[key] === \"object\" && !Array.isArray(instance[key])) {\n      sorted[key] = objectKeysSort(instance[key], isDeep);\n    } else {\n      sorted[key] = instance[key];\n    }\n    return sorted;\n  }, Object.create(Object.getPrototypeOf(instance)));\n}\n","function clone(val) {\n  switch (typeOf(val)) {\n    case \"array\":\n      return val.slice();\n    case \"object\":\n      return Object.assign({}, val);\n    case \"date\":\n      return new val.constructor(Number(val));\n    case \"map\":\n      return new Map(val);\n    case \"set\":\n      return new Set(val);\n    case \"buffer\":\n      return cloneBuffer(val);\n    case \"symbol\":\n      return cloneSymbol(val);\n    case \"arraybuffer\":\n      return cloneArrayBuffer(val);\n    case \"float32array\":\n    case \"float64array\":\n    case \"int16array\":\n    case \"int32array\":\n    case \"int8array\":\n    case \"uint16array\":\n    case \"uint32array\":\n    case \"uint8clampedarray\":\n    case \"uint8array\":\n      return cloneTypedArray(val);\n    case \"regexp\":\n      return cloneRegExp(val);\n    case \"error\":\n      return Object.create(val);\n    default: {\n      return val;\n    }\n  }\n}\nfunction cloneRegExp(val) {\n  let flags;\n  if (val.flags !== undefined) {\n    flags = val.flags;\n  } else {\n    flags = /\\w+$/.exec(val) || undefined;\n  }\n  const re = new val.constructor(val.source, flags);\n  re.lastIndex = val.lastIndex;\n  return re;\n}\nfunction cloneArrayBuffer(val) {\n  const res = new val.constructor(val.byteLength);\n  new Uint8Array(res).set(new Uint8Array(val));\n  return res;\n}\nfunction cloneTypedArray(val) {\n  return new val.constructor(val.buffer, val.byteOffset, val.length);\n}\nfunction cloneBuffer(val) {\n  const len = val.length;\n  let buf;\n  if (Buffer.allocUnsafe) {\n    buf = Buffer.allocUnsafe(len);\n  } else {\n    buf = Buffer.from(len);\n  }\n  val.copy(buf);\n  return buf;\n}\nfunction cloneSymbol(val) {\n  if (Symbol.prototype.valueOf) {\n    return Object(Symbol.prototype.valueOf.call(val));\n  }\n  return {};\n}\nfunction isBuffer(obj) {\n  return (\n    obj !== null &&\n    Boolean(obj.constructor) &&\n    typeof obj.constructor.isBuffer === \"function\" &&\n    obj.constructor.isBuffer(obj)\n  );\n}\nfunction typeOf(val) {\n  if (typeof val === \"undefined\") {\n    return \"undefined\";\n  }\n  if (val === null) {\n    return \"null\";\n  }\n  if (val === true || val === false || val instanceof Boolean) {\n    return \"boolean\";\n  }\n  if (typeof val === \"string\" || val instanceof String) {\n    return \"string\";\n  }\n  if (typeof val === \"number\" || val instanceof Number) {\n    return \"number\";\n  }\n  if (typeof val === \"function\" || val instanceof Function) {\n    return \"function\";\n  }\n  if (typeof Array.isArray !== \"undefined\" && Array.isArray(val)) {\n    return \"array\";\n  }\n  if (val instanceof RegExp) {\n    return \"regexp\";\n  }\n  if (val instanceof Date) {\n    return \"date\";\n  }\n  const type = toString.call(val);\n  if (type === \"[object RegExp]\") {\n    return \"regexp\";\n  }\n  if (type === \"[object Date]\") {\n    return \"date\";\n  }\n  if (type === \"[object Arguments]\") {\n    return \"arguments\";\n  }\n  if (type === \"[object Error]\") {\n    return \"error\";\n  }\n  if (isBuffer(val)) {\n    return \"buffer\";\n  }\n  if (type === \"[object Set]\") {\n    return \"set\";\n  }\n  if (type === \"[object WeakSet]\") {\n    return \"weakset\";\n  }\n  if (type === \"[object Map]\") {\n    return \"map\";\n  }\n  if (type === \"[object WeakMap]\") {\n    return \"weakmap\";\n  }\n  if (type === \"[object Symbol]\") {\n    return \"symbol\";\n  }\n  if (type === \"[object Int8Array]\") {\n    return \"int8array\";\n  }\n  if (type === \"[object Uint8Array]\") {\n    return \"uint8array\";\n  }\n  if (type === \"[object Uint8ClampedArray]\") {\n    return \"uint8clampedarray\";\n  }\n  if (type === \"[object Int16Array]\") {\n    return \"int16array\";\n  }\n  if (type === \"[object Uint16Array]\") {\n    return \"uint16array\";\n  }\n  if (type === \"[object Int32Array]\") {\n    return \"int32array\";\n  }\n  if (type === \"[object Uint32Array]\") {\n    return \"uint32array\";\n  }\n  if (type === \"[object Float32Array]\") {\n    return \"float32array\";\n  }\n  if (type === \"[object Float64Array]\") {\n    return \"float64array\";\n  }\n  return \"object\";\n}\nfunction isObject(obj) {\n  return typeof obj === \"object\" && obj !== null;\n}\nfunction isObjectObject(obj) {\n  return isObject(obj) === true && Object.prototype.toString.call(obj) === \"[object Object]\";\n}\nfunction isPlainObject(obj) {\n  let ctor;\n  let prototype;\n  if (isObjectObject(obj) === false) {\n    return false;\n  }\n  ctor = obj.constructor;\n  if (typeof ctor !== \"function\") {\n    return false;\n  }\n  prototype = ctor.prototype;\n  if (isObjectObject(prototype) === false) {\n    return false;\n  }\n  // eslint-disable-next-line no-prototype-builtins\n  return prototype.hasOwnProperty(\"isPrototypeOf\") !== false;\n}\nfunction cloneDeep(val, instanceClone) {\n  switch (typeOf(val)) {\n    case \"object\":\n      return cloneObjectDeep(val, instanceClone);\n    case \"array\":\n      return cloneArrayDeep(val, instanceClone);\n    default: {\n      return clone(val);\n    }\n  }\n}\nfunction cloneObjectDeep(val, instanceClone) {\n  if (typeof instanceClone === \"function\") {\n    return instanceClone(val);\n  }\n  if (instanceClone || isPlainObject(val)) {\n    const res = new val.constructor();\n    for (let key in val) {\n      res[key] = cloneDeep(val[key], instanceClone);\n    }\n    return res;\n  }\n  return val;\n}\nfunction cloneArrayDeep(val, instanceClone) {\n  const res = new val.constructor(val.length);\n  for (let index = 0; index < val.length; index++) {\n    res[index] = cloneDeep(val[index], instanceClone);\n  }\n  return res;\n}\nexport default cloneDeep;\n","import checkIsPrimitive from \"@corefunc/corefunc/check/isPrimitive\";\n\nimport cloneDeep from \"./cloneDeep\";\n\n/**\n * @name clone\n * @param {*} value\n * @returns {*}\n */\nexport default function clone(value) {\n  if (checkIsPrimitive(value)) {\n    return value;\n  }\n  return cloneDeep(value);\n}\n","/**\n * @name checkIsPrimitive\n * @description Return true on boolean, string, number, BigInt, null, Symbol and undefined\n * @param {*} value\n * @return {boolean}\n */\nexport default function checkIsPrimitive(value) {\n  return Object(value) !== value;\n}\n","import checkIsObjectLike from \"@corefunc/corefunc/check/isObjectLike\";\n\n/**\n * @name defaultsConfig\n * @throws TypeError\n * @param {Object.<string, *>} propertyDefaultValues\n * @returns {Object}\n */\nexport default function defaultsConfig(propertyDefaultValues) {\n  if (!checkIsObjectLike(propertyDefaultValues)) {\n    throw new TypeError(\"'Defaults' should be an object\");\n  }\n  return propertyDefaultValues;\n}\n","import objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\n/**\n * @name defaultsData\n * @param {Object.<string, *>} propertyDefaultValues\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function defaultsData(propertyDefaultValues, dataToSerialize) {\n  if (objectIsEmpty(propertyDefaultValues)) {\n    return dataToSerialize;\n  }\n  Object.keys(propertyDefaultValues).forEach((key) => {\n    if (!(key in dataToSerialize) || dataToSerialize[key] === undefined) {\n      dataToSerialize[key] = propertyDefaultValues[key];\n    }\n  });\n  return dataToSerialize;\n}\n","/**\n * @name arrayGetUnique\n * @param {Array} array\n * @param {boolean=} sort\n * @returns {Array}\n * @example\n * arrayGetUnique([NaN, NaN, 0, -0, +0, \"\\u0065\\u0301\", \"\\u00e9\"]) -> [ NaN, 0, 'é', -0 ]\n */\nexport default function arrayGetUnique(array, sort = true) {\n  if (array.length < 2) {\n    return array;\n  }\n  let unique = [...new Set(array)];\n  if (unique.includes(0)) {\n    const zeroes = array.filter((value) => value === 0);\n    if (zeroes.length > 1 && zeroes.some((value) => 1 / value === Number.NEGATIVE_INFINITY)) {\n      unique.push(-0);\n    }\n  }\n  if (unique.filter((value) => typeof value === \"string\").length) {\n    const strings = array.filter((value) => typeof value === \"string\");\n    if (strings.length > 1) {\n      const normalized = [...new Set(strings.map((value) => value.normalize()))];\n      normalized.forEach((value) => {\n        delete unique[unique.indexOf(value)];\n      });\n      const compacted = [];\n      for (let index = 0; index < unique.length; index++) {\n        if (index in unique) {\n          compacted.push(unique[index]);\n        }\n      }\n      unique = compacted.concat(normalized);\n    }\n  }\n  if (sort) {\n    return unique.sort();\n  }\n  return unique;\n}\n","/**\n * @name arrayIsEmpty\n * @param {Array} array\n * @returns {boolean}\n */\nexport default function arrayIsEmpty(array) {\n  return array.length === 0;\n}\n","import arrayGetUnique from \"@corefunc/corefunc/array/get/unique\";\nimport arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\nimport isString from \"@corefunc/corefunc/is/string\";\n\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name definedConfig\n * @throws TypeError\n * @param {Array.<string>} propertiesMustBeDefined\n * @returns {Array.<string>}\n */\nexport default function definedConfig(propertiesMustBeDefined) {\n  if (!Array.isArray(propertiesMustBeDefined)) {\n    throw new TypeError(\"'Defined' should be an array\");\n  }\n  if (arrayIsEmpty(propertiesMustBeDefined)) {\n    return [];\n  }\n  return arrayGetUnique(propertiesMustBeDefined).map((value) => {\n    if (!isString(value)) {\n      throw new TypeError(`'Defined' expect array of strings. Value: '${jsonStringify(value)}'.`);\n    }\n    return value;\n  });\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\n\nimport definedConfig from \"./definedConfig\";\n\n/**\n * @name definedData\n * @throws TypeError\n * @param {Array.<string>} propertiesMustBeDefined\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function definedData(propertiesMustBeDefined, dataToSerialize) {\n  const config = definedConfig(propertiesMustBeDefined);\n  if (arrayIsEmpty(config)) {\n    return dataToSerialize;\n  }\n  config.forEach((key) => {\n    if (!(key in dataToSerialize)) {\n      throw new Error(`Field '${key}' must be defined.`);\n    }\n    if (dataToSerialize[key] === undefined) {\n      throw new Error(`Field '${key}' should have value.`);\n    }\n  });\n  return dataToSerialize;\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isRegExp(value) {\n  return value instanceof RegExp;\n}\n","import arrayGetUnique from \"@corefunc/corefunc/array/get/unique\";\nimport arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\nimport isRegExp from \"@corefunc/corefunc/is/regexp\";\nimport isString from \"@corefunc/corefunc/is/string\";\n\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name excludeConfig\n * @throws TypeError\n * @param {Array.<string|RegExp>} propertiesToExclude\n * @returns {Array.<string|RegExp>}\n */\nexport default function excludeConfig(propertiesToExclude) {\n  if (!Array.isArray(propertiesToExclude)) {\n    throw new TypeError(\"'Exclude' should be an array\");\n  }\n  if (arrayIsEmpty(propertiesToExclude)) {\n    return [];\n  }\n  return arrayGetUnique(propertiesToExclude).map((value) => {\n    if (!isString(value) && !isRegExp(value)) {\n      throw new TypeError(\n        `'Exclude' expect array of strings or regular expressions. Value: '${jsonStringify(value)}'.`,\n      );\n    }\n    return value;\n  });\n}\n","import arrayGetUnique from \"@corefunc/corefunc/array/get/unique\";\nimport arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\nimport isString from \"@corefunc/corefunc/is/string\";\n\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name omitConfig\n * @throws TypeError\n * @param {Array.<string>} propertiesToOmit\n * @returns {Array.<string>}\n */\nexport default function omitConfig(propertiesToOmit) {\n  if (!Array.isArray(propertiesToOmit)) {\n    throw new TypeError(\"'Omit' should be an array\");\n  }\n  if (arrayIsEmpty(propertiesToOmit)) {\n    return [];\n  }\n  return arrayGetUnique(propertiesToOmit).map((value) => {\n    if (!isString(value)) {\n      throw new TypeError(`'Omit' expect array of strings. Value: '${jsonStringify(value)}'.`);\n    }\n    return value;\n  });\n}\n","import arrayGetUnique from \"@corefunc/corefunc/array/get/unique\";\nimport arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\nimport isString from \"@corefunc/corefunc/is/string\";\n\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name orderConfig\n * @throws TypeError\n * @param {Array.<string>} propertiesToStreamline\n * @returns {Array.<string>}\n */\nexport default function orderConfig(propertiesToStreamline) {\n  if (!Array.isArray(propertiesToStreamline)) {\n    throw new TypeError(\"'Order' should be an array\");\n  }\n  if (arrayIsEmpty(propertiesToStreamline)) {\n    return [];\n  }\n  return arrayGetUnique(propertiesToStreamline, false).map((value) => {\n    if (!isString(value)) {\n      throw new TypeError(`'Order' expect array of strings. Value: '${jsonStringify(value)}'.`);\n    }\n    return value;\n  });\n}\n","/**\n * @name objectKeysOrder\n * @param {Object} instance\n * @param {Array.<string>} keys\n * @param {boolean=} alphabetize\n * @returns {Object}\n */\nexport default function objectKeysOrder(instance, keys = [], alphabetize = false) {\n  if (!Array.isArray(keys) || keys.length === 0) {\n    return instance;\n  }\n  const orderKeys = keys.filter((key) => typeof key === \"string\");\n  let objectKeys = new Set(Object.keys(instance));\n  const newObject = {};\n  orderKeys.forEach((key) => {\n    objectKeys.delete(key);\n    if (key in instance) {\n      newObject[key] = instance[key];\n    }\n  });\n  objectKeys = [...objectKeys];\n  if (alphabetize) {\n    objectKeys = objectKeys.sort((alpha, beta) => alpha.localeCompare(beta));\n  }\n  objectKeys.forEach((key) => (newObject[key] = instance[key]));\n  return newObject;\n}\n","import arrayGetUnique from \"@corefunc/corefunc/array/get/unique\";\nimport arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\nimport isString from \"@corefunc/corefunc/is/string\";\n\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name pickConfig\n * @throws TypeError\n * @param {Array.<string>} propertiesToPick\n * @returns {Array.<string>}\n */\nexport default function pickConfig(propertiesToPick) {\n  if (!Array.isArray(propertiesToPick)) {\n    throw new TypeError(\"'Pick' should be an array\");\n  }\n  if (arrayIsEmpty(propertiesToPick)) {\n    return [];\n  }\n  return arrayGetUnique(propertiesToPick).map((value) => {\n    if (!isString(value)) {\n      throw new TypeError(`'Pick' expect array of strings. Value: '${jsonStringify(value)}'.`);\n    }\n    return value;\n  });\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\n\n/**\n * @name pickData\n * @param {Array.<string>} propertiesToPick\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function pickData(propertiesToPick, dataToSerialize) {\n  if (arrayIsEmpty(propertiesToPick)) {\n    return dataToSerialize;\n  }\n  const newCache = {};\n  Object.keys(dataToSerialize).forEach((key) => {\n    if (propertiesToPick.includes(key)) {\n      newCache[key] = dataToSerialize[key];\n    }\n  });\n  return newCache;\n}\n","import arrayGetUnique from \"@corefunc/corefunc/array/get/unique\";\nimport checkIsObjectLike from \"@corefunc/corefunc/check/isObjectLike\";\nimport objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\nimport isString from \"@corefunc/corefunc/is/string\";\n\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name renameConfig\n * @throws TypeError\n * @param {Object.<string, string>} renamePropertyFromTo\n * @returns {Object}\n */\nexport default function renameConfig(renamePropertyFromTo) {\n  if (!checkIsObjectLike(renamePropertyFromTo)) {\n    throw new TypeError(\"'Rename' should be an object\");\n  }\n  if (objectIsEmpty(renamePropertyFromTo)) {\n    return {};\n  }\n  Object.keys(renamePropertyFromTo).forEach((key) => {\n    if (!isString(key)) {\n      throw new TypeError(`'Rename' expect object values to be strings. Not a string at key: '${key}'.`);\n    }\n  });\n  const to = Object.values(renamePropertyFromTo);\n  const toUnique = arrayGetUnique(to);\n  if (to.length !== toUnique.length) {\n    throw new TypeError(`'Rename' has similar values: '${jsonStringify(toUnique)}'.`);\n  }\n  return renamePropertyFromTo;\n}\n","import objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\n/**\n * @name renameData\n * @param {Object.<string, string>} renamePropertyFromTo\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function renameData(renamePropertyFromTo, dataToSerialize) {\n  if (objectIsEmpty(renamePropertyFromTo)) {\n    return dataToSerialize;\n  }\n  const renameFrom = Object.keys(renamePropertyFromTo).sort((alpha, beta) => alpha.localeCompare(beta));\n  const renamedData = {};\n  renameFrom.forEach((key) => {\n    if (!(key in dataToSerialize)) {\n      throw new Error(`Field '${key}' suppose to be renamed.`);\n    }\n    renamedData[renamePropertyFromTo[key]] = dataToSerialize[key];\n  });\n  renameFrom.forEach((key) => {\n    delete dataToSerialize[key];\n  });\n  Object.assign(dataToSerialize, renamedData);\n  return dataToSerialize;\n}\n","import checkIsObjectLike from \"@corefunc/corefunc/check/isObjectLike\";\n\n/**\n * @name replaceConfig\n * @throws TypeError\n * @param {Object.<string, *>} replacePropertyValues\n * @returns {Object}\n */\nexport default function replaceConfig(replacePropertyValues) {\n  if (!checkIsObjectLike(replacePropertyValues)) {\n    throw new TypeError(\"'Replace' should be an object\");\n  }\n  return replacePropertyValues;\n}\n","import objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\n/**\n * @name replaceData\n * @param {Object.<string, *>} replacePropertyValues\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function replaceData(replacePropertyValues, dataToSerialize) {\n  if (objectIsEmpty(replacePropertyValues)) {\n    return dataToSerialize;\n  }\n  Object.keys(replacePropertyValues).forEach((key) => {\n    dataToSerialize[key] = replacePropertyValues[key];\n  });\n  return dataToSerialize;\n}\n","import arrayGetUnique from \"@corefunc/corefunc/array/get/unique\";\nimport arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\nimport isString from \"@corefunc/corefunc/is/string\";\n\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name requiredConfig\n * @throws TypeError\n * @param {Array.<string>} propertiesRequired\n * @returns {Array.<string>}\n */\nexport default function requiredConfig(propertiesRequired) {\n  if (!Array.isArray(propertiesRequired)) {\n    throw new TypeError(\"'Required' should be an array\");\n  }\n  if (arrayIsEmpty(propertiesRequired)) {\n    return [];\n  }\n  return arrayGetUnique(propertiesRequired).map((value) => {\n    if (!isString(value)) {\n      throw new TypeError(`'Required' expect array of strings. Value: '${jsonStringify(value)}'.`);\n    }\n    return value;\n  });\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\n\n/**\n * @name requiredData\n * @param {Array.<string>} propertiesRequired\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function requiredData(propertiesRequired, dataToSerialize) {\n  if (arrayIsEmpty(propertiesRequired)) {\n    return dataToSerialize;\n  }\n  propertiesRequired.forEach((key) => {\n    if (!(key in dataToSerialize)) {\n      throw new Error(`Field '${key}' is required.`);\n    }\n  });\n  return dataToSerialize;\n}\n","import checkIsCallable from \"@corefunc/corefunc/check/isCallable\";\nimport checkIsObjectLike from \"@corefunc/corefunc/check/isObjectLike\";\nimport objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\n/**\n * @name transformConfig\n * @throws TypeError\n * @param {Object.<string, function>} propertyValueTransformWith\n * @returns {Object}\n */\nexport default function transformConfig(propertyValueTransformWith) {\n  if (!checkIsObjectLike(propertyValueTransformWith)) {\n    throw new TypeError(\"'Transform' should be an object\");\n  }\n  if (objectIsEmpty(propertyValueTransformWith)) {\n    return {};\n  }\n  Object.keys(propertyValueTransformWith).forEach((key) => {\n    if (!checkIsCallable(propertyValueTransformWith[key])) {\n      throw new TypeError(`'Transform' expect object values to be functions. Not a function at key: '${key}'.`);\n    }\n  });\n  return propertyValueTransformWith;\n}\n","import isFunction from \"../is/function.mjs\";\n\nexport default function checkIsCallable(value) {\n  if (!value) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return true;\n  }\n  if (\"toFunction\" in value && isFunction(value.toFunction) && isFunction(value.toFunction())) {\n    return true;\n  }\n  //\n  return false;\n}\n","import isFunction from \"@corefunc/corefunc/is/function\";\nimport objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\nimport clone from \"../../util/variable/clone\";\n\n/**\n * @name transformData\n * @param {Object.<string, function>} propertyValueTransformWith\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function transformData(propertyValueTransformWith, dataToSerialize) {\n  if (objectIsEmpty(propertyValueTransformWith)) {\n    return dataToSerialize;\n  }\n  Object.keys(propertyValueTransformWith).forEach((key) => {\n    if (!(key in dataToSerialize)) {\n      throw new Error(`Field '${key}' suppose to be transformed.`);\n    }\n    if (isFunction(propertyValueTransformWith[key])) {\n      dataToSerialize[key] = propertyValueTransformWith[key](dataToSerialize[key], key, clone(dataToSerialize));\n    } else {\n      // noinspection JSUnresolvedFunction\n      dataToSerialize[key] = propertyValueTransformWith[key].toFunction()(\n        dataToSerialize[key],\n        key,\n        clone(dataToSerialize),\n      );\n    }\n  });\n  return dataToSerialize;\n}\n","import TYPES_ENUM from \"../const/typesEnum.mjs\";\n\nexport default class VicisParameter {\n  #cast = undefined;\n  #defaults = undefined;\n  #defined = undefined;\n  #hasDefaults = false;\n  #hasValue = false;\n  #required = undefined;\n  #transform = undefined;\n  #value = undefined;\n  get boolean() {\n    this.#cast = TYPES_ENUM.BOOLEAN;\n    return this;\n  }\n  get flag() {\n    this.#cast = TYPES_ENUM.FLAG;\n    return this;\n  }\n  get integer() {\n    this.#cast = TYPES_ENUM.INTEGER;\n    return this;\n  }\n  get numeric() {\n    this.#cast = TYPES_ENUM.NUMERIC;\n    return this;\n  }\n  get string() {\n    this.#cast = TYPES_ENUM.STRING;\n    return this;\n  }\n  get json() {\n    this.#cast = TYPES_ENUM.JSON;\n    return this;\n  }\n  get defined() {\n    this.#defined = true;\n    return this;\n  }\n  get required() {\n    this.#required = true;\n    return this;\n  }\n  replace(value) {\n    this.#value = value;\n    this.#hasValue = true;\n    return this;\n  }\n  default(value) {\n    this.#defaults = value;\n    this.#hasDefaults = true;\n    return this;\n  }\n  transform(callable) {\n    this.#transform = callable;\n    return this;\n  }\n  toObject() {\n    return {\n      cast: this.#cast,\n      defaults: this.#defaults,\n      defined: this.#defined,\n      hasDefaults: this.#hasDefaults,\n      hasValue: this.#hasValue,\n      required: this.#required,\n      transform: this.#transform,\n      value: this.#value,\n    };\n  }\n}\n","import isFunction from \"@corefunc/corefunc/is/function\";\n\nimport VicisParameter from \"./parameter\";\n\nexport default function convertFunctionToConfig(callable) {\n  if (!isFunction(callable)) {\n    throw new TypeError(\"Callable must be a function\");\n  }\n  const model = callable(\n    new Proxy(new Object(null), {\n      get: function (targetObject, propName) {\n        if (!(propName in targetObject)) {\n          targetObject[propName] = new VicisParameter();\n        }\n        return targetObject[propName];\n      },\n    }),\n  );\n  const config = {\n    cast: {},\n    defaults: {},\n    defined: [],\n    pick: [],\n    required: [],\n    replace: {},\n    transform: {},\n  };\n  Object.keys(model).forEach((key) => {\n    config.pick.push(key);\n    const data = {};\n    if (model[key] instanceof VicisParameter) {\n      data[key] = model[key].toObject();\n    } else {\n      const param = new VicisParameter();\n      param.replace(model[key]);\n      data[key] = param.toObject();\n    }\n    delete model[key];\n    if (data[key].cast) {\n      config.cast[key] = data[key].cast;\n    }\n    if (data[key].defined) {\n      config.defined.push(key);\n    }\n    if (data[key].required) {\n      config.required.push(key);\n    }\n    if (data[key].transform) {\n      config.transform[key] = data[key].transform;\n    }\n    if (data[key].hasDefaults) {\n      config.defaults[key] = data[key].defaults;\n    }\n    if (data[key].hasValue) {\n      config.replace[key] = data[key].value;\n    }\n  });\n  if (!Object.keys(config.cast).length) {\n    delete config.cast;\n  }\n  if (!Object.keys(config.defaults).length) {\n    delete config.defaults;\n  }\n  if (!config.defined.length) {\n    delete config.defined;\n  }\n  if (!config.pick.length) {\n    delete config.pick;\n  }\n  if (!config.required.length) {\n    delete config.required;\n  }\n  if (!Object.keys(config.replace).length) {\n    delete config.replace;\n  }\n  if (!Object.keys(config.transform).length) {\n    delete config.transform;\n  }\n  return config;\n}\n","import AggregateError from \"es-aggregate-error\";\nAggregateError.shim(); // will be a no-op if not needed\n\nexport { AggregateError };\n","export class ValidationError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ValidationError\";\n  }\n}\n","import arrayBasicIntersect from \"@corefunc/corefunc/array/basic/intersect\";\nimport arrayGetDifference from \"@corefunc/corefunc/array/get/difference\";\nimport arrayHasSame from \"@corefunc/corefunc/array/basic/hasSame\";\nimport checkIsObjectLike from \"@corefunc/corefunc/check/isObjectLike\";\nimport isFunction from \"@corefunc/corefunc/is/function\";\nimport objectGetKeys from \"@corefunc/corefunc/object/get/keys\";\nimport objectGetProperty from \"@corefunc/corefunc/object/get/property\";\n\nimport CONFIG_FIELDS from \"../const/configFields\";\nimport CONFIG_SORT from \"../const/configSort\";\n\nimport castConfig from \"./cast/castConfig\";\nimport castData from \"./cast/castData\";\nimport castToJson from \"../util/cast/toJson\";\nimport clone from \"../util/variable/clone\";\nimport defaultsConfig from \"./defaults/defaultsConfig\";\nimport defaultsData from \"./defaults/defaultsData\";\nimport definedConfig from \"./defined/definedConfig\";\nimport definedData from \"./defined/definedData\";\nimport excludeConfig from \"./exclude/excludeConfig\";\nimport excludeData from \"./exclude/excludeData\";\nimport jsonStringify from \"../util/json/stringify\";\nimport omitConfig from \"./omit/omitConfig\";\nimport omitData from \"./omit/omitData\";\nimport orderConfig from \"./order/orderConfig\";\nimport orderData from \"./order/orderData\";\nimport pickConfig from \"./pick/pickConfig\";\nimport pickData from \"./pick/pickData\";\nimport renameConfig from \"./rename/renameConfig\";\nimport renameData from \"./rename/renameData\";\nimport replaceConfig from \"./replace/replaceConfig\";\nimport replaceData from \"./replace/replaceData\";\nimport requiredConfig from \"./required/requiredConfig\";\nimport requiredData from \"./required/requiredData\";\nimport transformConfig from \"./transform/transformConfig\";\nimport transformData from \"./transform/transformData\";\nimport convertFunctionToConfig from \"./functionToConfig\";\n\nimport { AggregateError } from \"./errors/AggregateError\";\nimport { ValidationError } from \"./errors/ValidationError\";\n\nexport default class Vicis {\n  //#region Config Fields\n  /**\n   * @name cast\n   * @private\n   * @type {Object}\n   */\n  #cast = {};\n  /**\n   * @name defaults\n   * @private\n   * @type {Object}\n   */\n  #defaults = [];\n  /**\n   * @name defined\n   * @private\n   * @type {Array.<string>}\n   */\n  #defined = [];\n  /**\n   * @name exclude\n   * @private\n   * @type {Array.<string|RegExp>}\n   */\n  #exclude = [];\n  /**\n   * @name omit\n   * @private\n   * @type {Array.<string>}\n   */\n  #omit = [];\n  /**\n   * @name order\n   * @private\n   * @type {Array.<string>}\n   */\n  #order = [];\n  /**\n   * @name pick\n   * @private\n   * @type {Array.<string>}\n   */\n  #pick = [];\n  /**\n   * @name sort\n   * @private\n   * @type {boolean}\n   */\n  #sort = CONFIG_SORT;\n  /**\n   * @name rename\n   * @private\n   * @type {Object}\n   */\n  #rename = {};\n  /**\n   * @name replace\n   * @private\n   * @type {Object}\n   */\n  #replace = {};\n  /**\n   * @name required\n   * @private\n   * @type {Array.<string>}\n   */\n  #required = [];\n  /**\n   * @name transform\n   * @private\n   * @type {Object}\n   */\n  #transform = {};\n  //#endregion\n\n  //#region Data Fields\n  /**\n   * @name dataCache\n   * @private\n   * @type {Object}\n   */\n  #dataCache = {};\n  /**\n   * @name dataOriginal\n   * @private\n   * @type {Object}\n   */\n  #dataOriginal = undefined;\n  //#endregion\n\n  //#region Private Methods\n  /**\n   * @name validateConfig\n   * @private\n   * @method\n   * @throws Error\n   * @returns {Vicis}\n   */\n  #validateConfig;\n  /**\n   * @name validateData\n   * @private\n   * @method\n   * @throws Error\n   * @returns {Vicis}\n   */\n  #validateData;\n  //#endregion\n\n  //#region Initialization Methods\n  /**\n   * @name constructor\n   * @public\n   * @constructor\n   * @param {Function|Object=} config\n   * @param {Object=} data\n   * @throws AggregateError\n   */\n  constructor(config = {}, data) {\n    /**\n     * @name validateConfig\n     * @private\n     * @method\n     * @throws Error\n     * @returns {Vicis}\n     */\n    this.#validateConfig = function validateConfig() {\n      const cast = objectGetKeys(this.#cast);\n      const rename = objectGetKeys(this.#rename);\n      const replace = objectGetKeys(this.#replace);\n      const transform = objectGetKeys(this.#transform);\n      if (arrayHasSame(this.#omit, cast)) {\n        throw new ValidationError(`'omit' has same keys as 'cast': ${arrayBasicIntersect(this.#omit, cast)}.`);\n      }\n      if (arrayHasSame(this.#omit, this.#defined)) {\n        throw new ValidationError(\n          `'omit' has same keys as 'defined': ${arrayBasicIntersect(this.#omit, this.#defined)}.`,\n        );\n      }\n      if (arrayHasSame(this.#omit, this.#pick)) {\n        throw new ValidationError(`'omit' has same keys as 'pick': ${arrayBasicIntersect(this.#omit, this.#pick)}.`);\n      }\n      if (arrayHasSame(this.#omit, rename)) {\n        throw new ValidationError(`'omit' has same keys as 'rename': ${arrayBasicIntersect(this.#omit, rename)}.`);\n      }\n      if (arrayHasSame(this.#omit, replace)) {\n        throw new ValidationError(`'omit' has same keys as 'replace': ${arrayBasicIntersect(this.#omit, replace)}.`);\n      }\n      if (arrayHasSame(this.#omit, this.#required)) {\n        throw new ValidationError(\n          `'omit' has same keys as 'required': ${arrayBasicIntersect(this.#omit, this.#required)}.`,\n        );\n      }\n      if (arrayHasSame(this.#omit, transform)) {\n        throw new ValidationError(\n          `'omit' has same keys as 'transform': ${arrayBasicIntersect(this.#omit, transform)}.`,\n        );\n      }\n      if (arrayHasSame(cast, replace)) {\n        throw new ValidationError(`'cast' has same keys as 'replace': ${arrayBasicIntersect(cast, replace)}.`);\n      }\n      if (arrayHasSame(cast, transform)) {\n        throw new ValidationError(`'cast' has same keys as 'transform': ${arrayBasicIntersect(cast, transform)}.`);\n      }\n      if (arrayHasSame(replace, transform)) {\n        throw new ValidationError(\n          `'replace' has same keys as 'transform': ${arrayBasicIntersect(replace, transform)}.`,\n        );\n      }\n      return this;\n    }.bind(this);\n    /**\n     * @name validateData\n     * @private\n     * @method\n     * @throws Error\n     * @returns {Vicis}\n     */\n    this.#validateData = function validateData() {\n      if (this.#dataOriginal === undefined) {\n        return this;\n      }\n      if (\"toObject\" in this.#dataOriginal && isFunction(this.#dataOriginal.toObject)) {\n        this.#dataCache = this.#dataOriginal.toObject();\n      } else if (\"toJSON\" in this.#dataOriginal && isFunction(this.#dataOriginal.toJSON)) {\n        this.#dataCache = this.#dataOriginal.toJSON();\n      } else {\n        this.#dataCache = this.#dataOriginal;\n      }\n      this.#dataCache = omitData(this.#omit, this.#dataCache);\n      this.#dataCache = requiredData(this.#required, this.#dataCache);\n      this.#dataCache = definedData(this.#defined, this.#dataCache);\n      this.#dataCache = castData(this.#cast, this.#dataCache);\n      this.#dataCache = transformData(this.#transform, this.#dataCache);\n      this.#dataCache = replaceData(this.#replace, this.#dataCache);\n      this.#dataCache = renameData(this.#rename, this.#dataCache);\n      this.#dataCache = defaultsData(this.#defaults, this.#dataCache);\n      this.#dataCache = pickData(this.#pick, this.#dataCache);\n      this.#dataCache = excludeData(this.#exclude, this.#dataCache);\n      this.#dataCache = castToJson(this.#dataCache, this.#sort);\n      this.#dataCache = orderData(this.#order, this.#dataCache, this.#sort);\n      return this;\n    }.bind(this);\n    this.config(config);\n    if (data !== undefined) {\n      this.data(data);\n    }\n  }\n  //#endregion\n\n  //#region Static Methods\n  /**\n   * @name factory\n   * @public\n   * @static\n   * @factory\n   * @param {Function|Object=} config\n   * @param {Object=} data\n   * @returns {Vicis}\n   */\n  static factory(config = {}, data) {\n    return new Vicis(config, data);\n  }\n  /**\n   * @name from\n   * @public\n   * @static\n   * @throws TypeError\n   * @param {Object} data\n   * @param {Object=} config\n   * @returns {Object}\n   */\n  static from(data, config = {}) {\n    return Vicis.factory(config, data).getData();\n  }\n  /**\n   * @name fromArray\n   * @static\n   * @public\n   * @param {Array.<Object>} collection\n   * @param {Object=} config\n   * @returns {Array.<Object>}\n   */\n  static fromArray(collection, config = {}) {\n    const serializer = Vicis.factory(config);\n    return Array.from(collection).map((data) => serializer.data(data).getData());\n  }\n  /**\n   * @name BOOLEAN\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get BOOLEAN() {\n    return \"boolean\";\n  }\n  /**\n   * @name FLAG\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get FLAG() {\n    return \"flag\";\n  }\n  /**\n   * @name NUMERIC\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get NUMERIC() {\n    return \"numeric\";\n  }\n  /**\n   * @name INTEGER\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get INTEGER() {\n    return \"integer\";\n  }\n  /**\n   * @name STRING\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get STRING() {\n    return \"string\";\n  }\n  /**\n   * @name JSON\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get JSON() {\n    return \"json\";\n  }\n  //#endregion\n\n  //#region Public Config Methods\n  /**\n   * @name getConfig\n   * @public\n   * @returns {Object}\n   */\n  getConfig() {\n    return clone({\n      cast: this.#cast,\n      defaults: this.#defaults,\n      defined: this.#defined,\n      exclude: this.#exclude,\n      omit: this.#omit,\n      order: this.#order,\n      pick: this.#pick,\n      sort: this.#sort,\n      rename: this.#rename,\n      replace: this.#replace,\n      required: this.#required,\n      transform: this.#transform,\n    });\n  }\n  /**\n   * @name resetConfig\n   * @public\n   * @returns {Vicis}\n   */\n  resetConfig() {\n    this.#cast = {};\n    this.#defaults = {};\n    this.#defined = [];\n    this.#exclude = [];\n    this.#omit = [];\n    this.#order = [];\n    this.#pick = [];\n    this.#sort = CONFIG_SORT;\n    this.#rename = {};\n    this.#replace = {};\n    this.#required = [];\n    this.#transform = {};\n    return this;\n  }\n  /**\n   * @name testConfig\n   * @public\n   * @static\n   * @throws AggregateError\n   * @param {Function|Object=} config\n   * @returns {Object}\n   * @since 1.6.0\n   */\n  static testConfig(config = {}) {\n    if (isFunction(config)) {\n      // eslint-disable-next-line no-param-reassign\n      config = convertFunctionToConfig(config);\n    }\n    if (!checkIsObjectLike(config)) {\n      throw new AggregateError([new TypeError(\"Config should be an object\")], \"Configuration has errors\");\n    }\n    const diff = arrayGetDifference(objectGetKeys(config), CONFIG_FIELDS);\n    if (diff.length) {\n      throw new AggregateError(\n        [new TypeError(`Config has unknown fields: '${diff.join(\"', '\")}'.`)],\n        \"Configuration has errors\",\n      );\n    }\n    const cast = objectGetKeys(objectGetProperty(config, \"cast\", {}));\n    const rename = objectGetKeys(objectGetProperty(config, \"rename\", {}));\n    const replace = objectGetKeys(objectGetProperty(config, \"replace\", {}));\n    const transform = objectGetKeys(objectGetProperty(config, \"transform\", {}));\n    const errors = [];\n    if (\"omit\" in config && arrayHasSame(config.omit, cast)) {\n      errors.push(new ValidationError(`'omit' has same keys as 'cast': ${arrayBasicIntersect(config.omit, cast)}.`));\n    }\n    if (\"omit\" in config && \"defined\" in config && arrayHasSame(config.omit, config.defined)) {\n      errors.push(\n        new ValidationError(`'omit' has same keys as 'defined': ${arrayBasicIntersect(config.omit, config.defined)}.`),\n      );\n    }\n    if (\"omit\" in config && \"pick\" in config && arrayHasSame(config.omit, config.pick)) {\n      errors.push(\n        new ValidationError(`'omit' has same keys as 'pick': ${arrayBasicIntersect(config.omit, config.pick)}.`),\n      );\n    }\n    if (\"omit\" in config && arrayHasSame(config.omit, rename)) {\n      errors.push(\n        new ValidationError(`'omit' has same keys as 'rename': ${arrayBasicIntersect(config.omit, rename)}.`),\n      );\n    }\n    if (\"omit\" in config && arrayHasSame(config.omit, replace)) {\n      errors.push(\n        new ValidationError(`'omit' has same keys as 'replace': ${arrayBasicIntersect(config.omit, replace)}.`),\n      );\n    }\n    if (\"omit\" in config && \"required\" in config && arrayHasSame(config.omit, config.required)) {\n      errors.push(\n        new ValidationError(\n          `'omit' has same keys as 'required': ${arrayBasicIntersect(config.omit, config.required)}.`,\n        ),\n      );\n    }\n    if (\"omit\" in config && arrayHasSame(config.omit, transform)) {\n      errors.push(\n        new ValidationError(`'omit' has same keys as 'transform': ${arrayBasicIntersect(config.omit, transform)}.`),\n      );\n    }\n    if (arrayHasSame(cast, replace)) {\n      errors.push(new ValidationError(`'cast' has same keys as 'replace': ${arrayBasicIntersect(cast, replace)}.`));\n    }\n    if (arrayHasSame(cast, transform)) {\n      errors.push(new ValidationError(`'cast' has same keys as 'transform': ${arrayBasicIntersect(cast, transform)}.`));\n    }\n    if (arrayHasSame(replace, transform)) {\n      errors.push(\n        new ValidationError(`'replace' has same keys as 'transform': ${arrayBasicIntersect(replace, transform)}.`),\n      );\n    }\n    if (errors.length) {\n      throw new AggregateError(\n        errors,\n        [\"Configuration has errors.\", ...errors.map((error, index) => `${index + 1}). ${error.message}`)].join(\"\\n\"),\n      );\n    }\n    return { ...config };\n  }\n  /**\n   * @name config\n   * @public\n   * @throws AggregateError|TypeError\n   * @param {Function|Object=} config\n   * @returns {Vicis}\n   */\n  config(config = {}) {\n    if (isFunction(config)) {\n      // eslint-disable-next-line no-param-reassign\n      config = convertFunctionToConfig(config);\n    }\n    if (!checkIsObjectLike(config)) {\n      throw new TypeError(\"Config should be an object\");\n    }\n    const diff = arrayGetDifference(objectGetKeys(config), CONFIG_FIELDS);\n    if (diff.length) {\n      throw new TypeError(`Config has unknown fields: '${diff.join(\"', '\")}'.`);\n    }\n    Vicis.testConfig(config);\n    this.resetConfig();\n    this.sort(config.sort);\n    this.omit(config.omit);\n    this.cast(config.cast);\n    this.defined(config.defined);\n    this.pick(config.pick);\n    this.rename(config.rename);\n    this.replace(config.replace);\n    this.required(config.required);\n    this.transform(config.transform);\n    this.defaults(config.defaults);\n    this.exclude(config.exclude);\n    this.order(config.order);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name cast\n   * @public\n   * @throws TypeError\n   * @param {Object=} propertyToType\n   * @returns {Vicis}\n   */\n  cast(propertyToType = {}) {\n    this.#cast = castConfig(propertyToType);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name defaults\n   * @public\n   * @throws TypeError\n   * @param {Object=} propertyDefaultValues\n   * @returns {Vicis}\n   */\n  defaults(propertyDefaultValues = {}) {\n    this.#defaults = defaultsConfig(propertyDefaultValues); // do not deep clone!\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name defined\n   * @public\n   * @throws TypeError\n   * @param {Array.<string>=} propertiesMustBeDefined\n   * @returns {Vicis}\n   */\n  defined(propertiesMustBeDefined = []) {\n    this.#defined = definedConfig(propertiesMustBeDefined);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name exclude\n   * @public\n   * @throws TypeError\n   * @param {Array.<string|RegExp>=} propertiesToExclude\n   * @returns {Vicis}\n   */\n  exclude(propertiesToExclude = []) {\n    this.#exclude = excludeConfig(propertiesToExclude);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name omit\n   * @public\n   * @throws TypeError\n   * @param {Array.<string>=} propertiesToOmit\n   * @returns {Vicis}\n   */\n  omit(propertiesToOmit = []) {\n    this.#omit = omitConfig(propertiesToOmit);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name order\n   * @public\n   * @throws TypeError\n   * @param {Array.<string>=} propertiesToStreamline\n   * @returns {Vicis}\n   */\n  order(propertiesToStreamline = []) {\n    this.#order = orderConfig(propertiesToStreamline);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name pick\n   * @public\n   * @throws TypeError\n   * @param {Array.<string>=} propertiesToPick\n   * @returns {Vicis}\n   */\n  pick(propertiesToPick = []) {\n    this.#pick = pickConfig(propertiesToPick);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name rename\n   * @public\n   * @throws TypeError\n   * @param {Object=} renamePropertyFromTo\n   * @returns {Vicis}\n   */\n  rename(renamePropertyFromTo = {}) {\n    this.#rename = renameConfig(renamePropertyFromTo);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name replace\n   * @public\n   * @throws TypeError\n   * @param {Object=} replacePropertyValues\n   * @returns {Vicis}\n   */\n  replace(replacePropertyValues = {}) {\n    this.#replace = replaceConfig(replacePropertyValues); // do not deep clone!\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name required\n   * @public\n   * @throws TypeError\n   * @param {Array.<string>=} propertiesRequired\n   * @returns {Vicis}\n   */\n  required(propertiesRequired = []) {\n    this.#required = requiredConfig(propertiesRequired);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name sort\n   * @public\n   * @throws TypeError\n   * @param {boolean=} sortProperties\n   * @returns {Vicis}\n   */\n  sort(sortProperties = CONFIG_SORT) {\n    if (typeof sortProperties !== \"boolean\") {\n      throw new TypeError(\"'sort' should be a boolean\");\n    }\n    this.#sort = sortProperties;\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name transform\n   * @public\n   * @throws TypeError\n   * @param {Object=} propertyValueTransformWith\n   * @returns {Vicis}\n   */\n  transform(propertyValueTransformWith = {}) {\n    this.#transform = transformConfig(propertyValueTransformWith); // do not deep clone!\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  //#endregion\n\n  //#region Public Data Methods\n  /**\n   * @name getData\n   * @public\n   * @returns {Object}\n   */\n  getData() {\n    return clone(this.#dataCache);\n  }\n  /**\n   * @name data\n   * @public\n   * @throws TypeError\n   * @param {Object} dataToSerialize\n   * @returns {Vicis}\n   */\n  data(dataToSerialize) {\n    if (!checkIsObjectLike(dataToSerialize)) {\n      throw new TypeError(\"Data should be an object\");\n    }\n    this.#dataOriginal = dataToSerialize; // keep reference\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name clear\n   * @description Clear any data references and cached values\n   * @public\n   * @returns {Vicis}\n   */\n  clear() {\n    this.#dataCache = {};\n    this.#dataOriginal = undefined;\n    return this;\n  }\n  //#endregion\n\n  //#region Public Main Methods\n  /**\n   * @name toJSON\n   * @public\n   * @returns {Object}\n   */\n  toJSON() {\n    return this.getData();\n  }\n  /**\n   * @name toString\n   * @public\n   * @returns {string}\n   */\n  toString() {\n    return jsonStringify(this.toJSON());\n  }\n  /**\n   * @name fromArray\n   * @public\n   * @param {Array.<Object>} collection\n   * @returns {Array.<Object>}\n   */\n  fromArray(collection) {\n    return Array.from(collection).map((data) => this.data(data).toJSON());\n  }\n  //#endregion\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\n\n/**\n * @name omitData\n * @param {Array.<string>} propertiesToOmit\n * @param {Object} data\n * @returns {Object}\n */\nexport default function omitData(propertiesToOmit, data) {\n  if (arrayIsEmpty(propertiesToOmit)) {\n    return data;\n  }\n  const dataToSerialize = {};\n  Object.keys(data).forEach((key) => {\n    if (propertiesToOmit.includes(key)) {\n      return;\n    }\n    dataToSerialize[key] = data[key];\n  });\n  return dataToSerialize;\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\nimport isRegExp from \"@corefunc/corefunc/is/regexp\";\nimport isString from \"@corefunc/corefunc/is/string\";\nimport objectGetKeys from \"@corefunc/corefunc/object/get/keys\";\n\n/**\n * @name excludeData\n * @param {Array.<string|RegExp>} propertiesToExclude\n * @param {Object} data\n * @returns {Object}\n */\nexport default function excludeData(propertiesToExclude, data) {\n  if (arrayIsEmpty(propertiesToExclude)) {\n    return data;\n  }\n  const excludeString = propertiesToExclude.filter(isString);\n  if (excludeString.length) {\n    Object.keys(data).forEach((key) => {\n      if (excludeString.includes(key)) {\n        delete data[key];\n      }\n    });\n  }\n  const keys = objectGetKeys(data);\n  if (keys.length === 0) {\n    return data;\n  }\n  const excludeRegExp = propertiesToExclude.filter(isRegExp);\n  if (excludeRegExp.length) {\n    excludeRegExp.forEach((reg) => {\n      Object.keys(data).forEach((key) => {\n        if (reg.test(key)) {\n          delete data[key];\n        }\n      });\n    });\n  }\n  return data;\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\nimport objectKeysOrder from \"@corefunc/corefunc/object/keys/order\";\n\nimport CONFIG_SORT from \"../../const/configSort\";\n\n/**\n * @name orderData\n * @param {Array.<string>} propertiesToStreamline\n * @param {Object} data\n * @param {boolean=} sort\n * @returns {Object}\n */\nexport default function orderData(propertiesToStreamline, data, sort = CONFIG_SORT) {\n  if (arrayIsEmpty(propertiesToStreamline)) {\n    return data;\n  }\n  return objectKeysOrder(data, propertiesToStreamline, sort);\n}\n","import objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\nimport castConfig from \"./castConfig\";\nimport castData from \"./castData\";\n\n/**\n * @name cast\n * @throws TypeError\n * @param {Object} data\n * @param {Object.<string, string>=} propertyToType\n * @returns {Object}\n */\nexport default function cast(data, propertyToType = {}) {\n  const config = castConfig(propertyToType);\n  if (objectIsEmpty(config)) {\n    return data;\n  }\n  return castData(config, data);\n}\n","import objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\nimport defaultsConfig from \"./defaultsConfig\";\nimport defaultsData from \"./defaultsData\";\n/**\n * @name defaults\n * @throws TypeError\n * @param {Object} data\n * @param {Object.<string, *>=} propertyDefaultValues\n * @returns {Object}\n */\nexport default function defaults(data, propertyDefaultValues = {}) {\n  const config = defaultsConfig(propertyDefaultValues);\n  if (objectIsEmpty(config)) {\n    return data;\n  }\n  return defaultsData(propertyDefaultValues, data);\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\n\nimport definedData from \"./definedData\";\n\n/**\n * @name defined\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string>=} propertiesMustBeDefined\n * @returns {Object}\n */\nexport default function defined(data, propertiesMustBeDefined = []) {\n  if (arrayIsEmpty(propertiesMustBeDefined)) {\n    return data;\n  }\n  return definedData(propertiesMustBeDefined, data);\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\nimport isRegExp from \"@corefunc/corefunc/is/regexp\";\nimport isString from \"@corefunc/corefunc/is/string\";\nimport objectGetKeys from \"@corefunc/corefunc/object/get/keys\";\n\nimport excludeConfig from \"./excludeConfig\";\n\n/**\n * @name exclude\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string|RegExp>=} propertiesToExclude\n * @returns {Object}\n */\nexport default function exclude(data, propertiesToExclude = []) {\n  const config = excludeConfig(propertiesToExclude);\n  if (arrayIsEmpty(config)) {\n    return data;\n  }\n  const excludeString = config.filter(isString);\n  if (excludeString.length) {\n    Object.keys(data).forEach((key) => {\n      if (excludeString.includes(key)) {\n        delete data[key];\n      }\n    });\n  }\n  const keys = objectGetKeys(data);\n  if (keys.length === 0) {\n    return data;\n  }\n  const excludeRegExp = config.filter(isRegExp);\n  if (excludeRegExp.length) {\n    excludeRegExp.forEach((reg) => {\n      Object.keys(data).forEach((key) => {\n        if (reg.test(key)) {\n          delete data[key];\n        }\n      });\n    });\n  }\n  return data;\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\n\nimport omitConfig from \"./omitConfig\";\n\n/**\n * @name omit\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string>=} propertiesToOmit\n * @returns {Object}\n */\nexport default function omit(data, propertiesToOmit = []) {\n  const config = omitConfig(propertiesToOmit);\n  if (arrayIsEmpty(config)) {\n    return data;\n  }\n  const dataToSerialize = {};\n  Object.keys(data).forEach((key) => {\n    if (config.includes(key)) {\n      return;\n    }\n    dataToSerialize[key] = data[key];\n  });\n  return dataToSerialize;\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\nimport objectKeysOrder from \"@corefunc/corefunc/object/keys/order\";\n\nimport CONFIG_SORT from \"../../const/configSort\";\n\nimport orderConfig from \"./orderConfig\";\n\n/**\n * @name order\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string>=} propertiesToStreamline\n * @param {boolean=} sort\n * @returns {Object}\n */\nexport default function order(data, propertiesToStreamline = [], sort = CONFIG_SORT) {\n  const config = orderConfig(propertiesToStreamline);\n  if (arrayIsEmpty(config)) {\n    return data;\n  }\n  return objectKeysOrder(data, propertiesToStreamline, sort);\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\n\nimport pickConfig from \"./pickConfig\";\nimport pickData from \"./pickData\";\n\n/**\n * @name pick\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string>=} propertiesToPick\n * @returns {Object}\n */\nexport default function pick(data, propertiesToPick = []) {\n  const config = pickConfig(propertiesToPick);\n  if (arrayIsEmpty(config)) {\n    return data;\n  }\n  return pickData(config, data);\n}\n","import objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\nimport renameConfig from \"./renameConfig\";\nimport renameData from \"./renameData\";\n\n/**\n * @name rename\n * @param {Object} data\n * @param {Object.<string, string>=} renamePropertyFromTo\n * @returns {Object}\n */\nexport default function rename(data, renamePropertyFromTo = {}) {\n  const config = renameConfig(renamePropertyFromTo);\n  if (objectIsEmpty(config)) {\n    return data;\n  }\n  return renameData(config, data);\n}\n","import objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\nimport replaceConfig from \"./replaceConfig\";\nimport replaceData from \"./replaceData\";\n\n/**\n * @name replace\n * @throws TypeError\n * @param {Object} data\n * @param {Object.<string, *>=} replacePropertyValues\n * @returns {Object}\n */\nexport default function replace(data, replacePropertyValues = {}) {\n  const config = replaceConfig(replacePropertyValues);\n  if (objectIsEmpty(config)) {\n    return data;\n  }\n  return replaceData(config, data);\n}\n","import arrayIsEmpty from \"@corefunc/corefunc/array/is/empty\";\n\nimport requiredConfig from \"./requiredConfig\";\nimport requiredData from \"./requiredData\";\n\n/**\n * @name required\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string>=} propertiesRequired\n * @returns {Object}\n */\nexport default function required(data, propertiesRequired = []) {\n  const config = requiredConfig(propertiesRequired);\n  if (arrayIsEmpty(config)) {\n    return data;\n  }\n  return requiredData(config, data);\n}\n","import objectIsEmpty from \"@corefunc/corefunc/object/is/empty\";\n\nimport transformConfig from \"./transformConfig\";\nimport transformData from \"./transformData\";\n\n/**\n * @name transform\n * @param {Object} data\n * @param {Object.<string, function>=} propertyValueTransformWith\n * @returns {Object}\n */\nexport default function transform(data, propertyValueTransformWith = {}) {\n  const config = transformConfig(propertyValueTransformWith);\n  if (objectIsEmpty(config)) {\n    return data;\n  }\n  return transformData(config, data);\n}\n"],"names":["TYPES_LIST","arrayBasicIntersect","alpha","beta","length","setB","Set","filter","value","has","arrayGetDifference","set","arrayHasSame","Boolean","x","checkIsObjectLike","Array","isArray","isFunction","Object","prototype","toString","call","test","Function","objectGetKeys","object","keys","sort","localeCompare","objectGetProperty","key","defaultvalue","CONFIG_FIELDS","isString","objectIsEmpty","jsonStringify","JSON","stringify","castConfig","propertyToType","TypeError","forEach","includes","castToString","result","is","TYPES_ENUM","jsonParse","text","parse","objectToPlain","objectDeserialize","objectSerialize","data","toJSON","toObject","castData","dataToSerialize","castTo","Error","convertToFlag","onEmpty","onUnParsable","affirmative","toLocaleLowerCase","trim","castedNumber","Number","isFinite","parsed","parseFloat","castedInteger","Math","trunc","castToJson","objectKeysSort","instance","isDeep","reduce","sorted","create","getPrototypeOf","clone","val","typeOf","slice","assign","constructor","Map","cloneBuffer","len","buf","Buffer","allocUnsafe","from","copy","cloneSymbol","Symbol","valueOf","cloneArrayBuffer","res","byteLength","Uint8Array","cloneTypedArray","buffer","byteOffset","cloneRegExp","flags","undefined","exec","re","source","lastIndex","String","RegExp","Date","type","isBuffer","obj","isObjectObject","isObject","cloneDeep","instanceClone","cloneObjectDeep","isPlainObject","ctor","hasOwnProperty","cloneArrayDeep","index","checkIsPrimitive","defaultsConfig","propertyDefaultValues","defaultsData","arrayGetUnique","array","unique","zeroes","some","NEGATIVE_INFINITY","push","strings","normalized","map","normalize","indexOf","compacted","concat","arrayIsEmpty","definedConfig","propertiesMustBeDefined","definedData","config","isRegExp","excludeConfig","propertiesToExclude","omitConfig","propertiesToOmit","orderConfig","propertiesToStreamline","objectKeysOrder","alphabetize","orderKeys","objectKeys","newObject","delete","pickConfig","propertiesToPick","pickData","newCache","renameConfig","renamePropertyFromTo","to","values","toUnique","renameData","renameFrom","renamedData","replaceConfig","replacePropertyValues","replaceData","requiredConfig","propertiesRequired","requiredData","transformConfig","propertyValueTransformWith","checkIsCallable","toFunction","transformData","VicisParameter","this","replace","default","transform","callable","cast","defaults","defined","hasDefaults","hasValue","required","convertFunctionToConfig","model","Proxy","get","targetObject","propName","pick","param","AggregateError","shim","ValidationError","message","name","Vicis","validateConfig","rename","bind","validateData","_classPrivateFieldGet","omitData","excludeData","excludeString","excludeRegExp","reg","orderData","factory","getData","collection","serializer","getConfig","exclude","omit","order","resetConfig","diff","join","errors","error","testConfig","sortProperties","clear","fromArray"],"mappings":"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"}