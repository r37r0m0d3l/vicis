{"version":3,"file":"vicis.mjs","sources":["../src/const/typesList.mjs","../src/const/configFields.mjs","../src/util/array/hasSame.mjs","../src/util/array/intersect.mjs","../src/util/check/isObjectEmpty.mjs","../src/util/check/isObjectLike.mjs","../src/util/is/isString.mjs","../src/util/json/stringify.mjs","../src/core/cast/castConfig.mjs","../src/const/typesEnum.mjs","../src/util/json/parse.mjs","../src/util/is/isFunction.mjs","../src/util/object/toPlain.mjs","../src/util/object/deserialize.mjs","../src/util/object/serialize.mjs","../src/core/cast/castData.mjs","../src/util/to/flag.mjs","../src/util/object/keys.mjs","../src/util/cast/toJson.mjs","../src/const/configSort.mjs","../src/util/collection/sortKeys.mjs","../src/util/variable/cloneDeep.mjs","../src/util/variable/clone.mjs","../src/util/check/isPrimitive.mjs","../src/core/defaults/defaultsConfig.mjs","../src/core/defaults/defaultsData.mjs","../src/util/array/unique.mjs","../src/util/check/isArrayEmpty.mjs","../src/core/defined/definedConfig.mjs","../src/core/defined/definedData.mjs","../src/util/is/isRegExp.mjs","../src/core/exclude/excludeConfig.mjs","../src/core/omit/omitConfig.mjs","../src/core/order/orderConfig.mjs","../src/util/object/orderKeys.mjs","../src/core/pick/pickConfig.mjs","../src/core/pick/pickData.mjs","../src/core/rename/renameConfig.mjs","../src/core/rename/renameData.mjs","../src/core/replace/replaceConfig.mjs","../src/core/replace/replaceData.mjs","../src/core/required/requiredConfig.mjs","../src/core/required/requiredData.mjs","../src/core/transform/transformConfig.mjs","../src/util/is/isCallable.mjs","../src/core/transform/transformData.mjs","../src/core/vicis.mjs","../src/core/omit/omitData.mjs","../src/core/exclude/excludeData.mjs","../src/core/order/orderData.mjs","../src/util/array/diff.mjs","../src/core/cast/cast.mjs","../src/core/defaults/defaults.mjs","../src/core/defined/defined.mjs","../src/core/exclude/exclude.mjs","../src/core/omit/omit.mjs","../src/core/order/order.mjs","../src/core/pick/pick.mjs","../src/core/rename/rename.mjs","../src/core/replace/replace.mjs","../src/core/required/required.mjs","../src/core/transform/transform.mjs"],"sourcesContent":["const TYPES_LIST = [\"boolean\", \"flag\", \"numeric\", \"integer\", \"string\", \"json\"];\n\nexport default TYPES_LIST;\n","const CONFIG_FIELDS = [\n  \"cast\",\n  \"defaults\",\n  \"defined\",\n  \"exclude\",\n  \"omit\",\n  \"order\",\n  \"pick\",\n  \"sort\",\n  \"rename\",\n  \"replace\",\n  \"required\",\n  \"transform\",\n];\n\nexport default CONFIG_FIELDS;\n","/**\n * @name arrayHasSame\n * @param {Array} alpha\n * @param {Array} beta\n * @returns {boolean}\n */\nexport default function arrayHasSame(alpha, beta) {\n  if (!alpha.length || !beta.length) {\n    return false;\n  }\n  const setB = new Set(beta);\n  return [...new Set(alpha)].filter((x) => setB.has(x)).length > 0;\n}\n","/**\n * @name arrayIntersect\n * @param {Array} alpha\n * @param {Array} beta\n * @returns {Array}\n */\nexport default function arrayIntersect(alpha, beta) {\n  if (!alpha.length || !beta.length) {\n    return [];\n  }\n  const setB = new Set(beta);\n  return [...new Set(alpha)].filter((x) => setB.has(x));\n}\n","/**\n * name isObjectEmpty\n * @param {Object} object\n * @returns {boolean}\n */\nexport default function isObjectEmpty(object) {\n  return Object.keys(object).length === 0;\n}\n","/**\n * name isObjectLike\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isObjectLike(value) {\n  return value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n","/**\n * @name isString\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isString(value) {\n  return typeof value === \"string\";\n}\n","/**\n * @name jsonStringify\n * @param {*} value\n * @returns string\n */\nexport default function jsonStringify(value) {\n  return JSON.stringify(value);\n}\n","import TYPES_LIST from \"../../const/typesList\";\nimport isObjectEmpty from \"../../util/check/isObjectEmpty\";\nimport isObjectLike from \"../../util/check/isObjectLike\";\nimport isString from \"../../util/is/isString\";\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name castConfig\n * @throws TypeError\n * @param {Object.<string, string>} propertyToType\n * @returns {Object}\n */\nexport default function castConfig(propertyToType) {\n  if (!isObjectLike(propertyToType)) {\n    throw new TypeError(\"Cast should be an object\");\n  }\n  if (isObjectEmpty(propertyToType)) {\n    return {};\n  }\n  Object.keys(propertyToType).forEach((key) => {\n    if (!isString(propertyToType[key])) {\n      throw new TypeError(\n        `'Cast' expect object values to be strings. Not a string at key: '${jsonStringify(propertyToType[key])}'.`,\n      );\n    }\n    if (!TYPES_LIST.includes(propertyToType[key])) {\n      throw new TypeError(`'Cast' has unknown type in {${key}: \"${propertyToType[key]}\"}.`);\n    }\n  });\n  return propertyToType;\n}\n","const TYPES_ENUM = {\n  BOOLEAN: \"boolean\",\n  FLAG: \"flag\",\n  NUMERIC: \"numeric\",\n  INTEGER: \"integer\",\n  STRING: \"string\",\n  JSON: \"json\",\n};\n\nexport default TYPES_ENUM;\n","/**\n * @name jsonParse\n * @param {string} text\n * @returns *\n */\nexport default function jsonParse(text) {\n  return JSON.parse(text);\n}\n","/**\n * @name isFunction\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isFunction(value) {\n  return Object.prototype.toString.call(value) === \"[object Function]\";\n}\n","import objectDeserialize from \"./deserialize\";\nimport objectSerialize from \"./serialize\";\n\n/**\n * @name objectToPlain\n * @param {object|string} value\n * @returns {*}\n */\nexport default function objectToPlain(value) {\n  return objectDeserialize(objectSerialize(value));\n}\n","import isString from \"../is/isString\";\nimport jsonParse from \"../json/parse\";\n\n/**\n * @name objectDeserialize\n * @param {string} value\n * @returns {*}\n */\nexport default function objectDeserialize(value) {\n  if (isString(value)) {\n    return jsonParse(value);\n  }\n  return value;\n}\n","import isFunction from \"../is/isFunction\";\nimport isString from \"../is/isString\";\nimport jsonStringify from \"../json/stringify\";\n\n/**\n * @name objectSerialize\n * @param {object|string} value\n * @returns {string}\n */\nexport default function objectSerialize(value) {\n  let data;\n  const { toJSON, toObject } = value;\n  if (isFunction(toObject)) {\n    data = value.toObject();\n  } else if (isFunction(toJSON)) {\n    data = value.toJSON();\n  } else {\n    data = value;\n  }\n  if (isString(data)) {\n    return data;\n  }\n  return jsonStringify(data);\n}\n","import TYPES_ENUM from \"../../const/typesEnum\";\nimport isObjectEmpty from \"../../util/check/isObjectEmpty\";\nimport objectToPlain from \"../../util/object/toPlain\";\nimport toFlag from \"../../util/to/flag\";\n\n/**\n * @name castData\n * @param {Object.<string, string>} propertyToType\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function castData(propertyToType, dataToSerialize) {\n  if (isObjectEmpty(propertyToType)) {\n    return dataToSerialize;\n  }\n  Object.keys(propertyToType).forEach((key) => {\n    const castTo = propertyToType[key];\n    if (!(key in dataToSerialize)) {\n      throw new Error(`Field '${key}' suppose to be converted to ${castTo}.`);\n    }\n    switch (castTo) {\n      case TYPES_ENUM.BOOLEAN:\n        dataToSerialize[key] = Boolean(dataToSerialize[key]);\n        break;\n      case TYPES_ENUM.FLAG:\n        dataToSerialize[key] = toFlag(dataToSerialize[key]);\n        break;\n      case TYPES_ENUM.NUMERIC: {\n        const castedNumber = Number(dataToSerialize[key]);\n        if (Number.isFinite(castedNumber)) {\n          dataToSerialize[key] = castedNumber;\n        } else {\n          const parsed = Number.parseFloat(toString(dataToSerialize[key]).trim());\n          if (Number.isFinite(parsed)) {\n            dataToSerialize[key] = parsed;\n          } else {\n            dataToSerialize[key] = 0;\n          }\n        }\n        break;\n      }\n      case TYPES_ENUM.INTEGER: {\n        const castedInteger = Number(dataToSerialize[key]);\n        if (Number.isFinite(castedInteger)) {\n          dataToSerialize[key] = Math.trunc(castedInteger);\n        } else {\n          const parsed = Number.parseFloat(toString(dataToSerialize[key]).trim());\n          if (Number.isFinite(parsed)) {\n            dataToSerialize[key] = Math.trunc(castedInteger);\n          } else {\n            dataToSerialize[key] = 0;\n          }\n        }\n        break;\n      }\n      case TYPES_ENUM.STRING:\n        dataToSerialize[key] = toString(dataToSerialize[key]);\n        break;\n      case TYPES_ENUM.JSON:\n        dataToSerialize[key] = objectToPlain(dataToSerialize[key]);\n        break;\n      default:\n        throw new Error(\"Unknown value convert error\");\n    }\n  });\n  return dataToSerialize;\n}\n","/**\n * @name toFlag\n * @description\n * Turns: undefined, null, 0, 0n, \"\", \"false\", \"FALSE\" to boolean false.\n * Turns: 1, 1n, \"1\", \"true\", \"TRUE\" to boolean true.\n * @param {*} value\n * @param {*=false} onEmpty\n * @param {*=false} onUnParsable\n * @returns {boolean}\n */\nexport default function toFlag(value, onEmpty = false, onUnParsable = false) {\n  if (value === undefined || value === null) {\n    return onEmpty;\n  }\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n  const affirmative = value\n    .toString()\n    .toLocaleLowerCase()\n    .trim();\n  if (affirmative.length === 0) {\n    return onEmpty;\n  }\n  if (affirmative === \"true\" || affirmative === \"1\") {\n    return true;\n  }\n  if (affirmative === \"false\" || affirmative === \"0\") {\n    return false;\n  }\n  return onUnParsable;\n}\n","/**\n * @name objectKeys\n * @param {Object} object\n * @returns {Array.<string>}\n */\nexport default function objectKeys(object) {\n  return Object.keys(object).sort((alpha, beta) => alpha.localeCompare(beta));\n}\n","import CONFIG_SORT from \"../../const/configSort\";\nimport collectionSortKeys from \"../collection/sortKeys\";\nimport jsonParse from \"../json/parse\";\nimport jsonStringify from \"../json/stringify\";\n\n/**\n * @name castToJson\n * @param {*} value\n * @param {boolean=} sort\n * @returns {*}\n */\nexport default function castToJson(value, sort = CONFIG_SORT) {\n  if (sort) {\n    return collectionSortKeys(jsonParse(jsonStringify(value)), true);\n  } else {\n    return jsonParse(jsonStringify(value));\n  }\n}\n","const CONFIG_SORT = false;\n\nexport default CONFIG_SORT;\n","import isObjectLike from \"../check/isObjectLike\";\nimport objectKeys from \"../object/keys\";\n\n/**\n * @name collectionSortKeys\n * @param {*} value\n * @param {boolean=true} isDeep\n * @returns {*}\n */\nexport default function collectionSortKeys(value, isDeep = true) {\n  if (!isObjectLike(value)) {\n    return value;\n  }\n  const keys = objectKeys(value);\n  if (!keys.length) {\n    return value;\n  }\n  return keys.reduce((sorted, key) => {\n    if (isDeep && isObjectLike(value[key])) {\n      sorted[key] = collectionSortKeys(value[key], isDeep);\n    } else {\n      sorted[key] = value[key];\n    }\n    return sorted;\n  }, {});\n}\n","function clone(val) {\n  switch (typeOf(val)) {\n    case \"array\":\n      return val.slice();\n    case \"object\":\n      return Object.assign({}, val);\n    case \"date\":\n      return new val.constructor(Number(val));\n    case \"map\":\n      return new Map(val);\n    case \"set\":\n      return new Set(val);\n    case \"buffer\":\n      return cloneBuffer(val);\n    case \"symbol\":\n      return cloneSymbol(val);\n    case \"arraybuffer\":\n      return cloneArrayBuffer(val);\n    case \"float32array\":\n    case \"float64array\":\n    case \"int16array\":\n    case \"int32array\":\n    case \"int8array\":\n    case \"uint16array\":\n    case \"uint32array\":\n    case \"uint8clampedarray\":\n    case \"uint8array\":\n      return cloneTypedArray(val);\n    case \"regexp\":\n      return cloneRegExp(val);\n    case \"error\":\n      return Object.create(val);\n    default: {\n      return val;\n    }\n  }\n}\nfunction cloneRegExp(val) {\n  let flags;\n  if (val.flags !== undefined) {\n    flags = val.flags;\n  } else {\n    flags = /\\w+$/.exec(val) || undefined;\n  }\n  const re = new val.constructor(val.source, flags);\n  re.lastIndex = val.lastIndex;\n  return re;\n}\nfunction cloneArrayBuffer(val) {\n  const res = new val.constructor(val.byteLength);\n  new Uint8Array(res).set(new Uint8Array(val));\n  return res;\n}\nfunction cloneTypedArray(val) {\n  return new val.constructor(val.buffer, val.byteOffset, val.length);\n}\nfunction cloneBuffer(val) {\n  const len = val.length;\n  let buf;\n  if (Buffer.allocUnsafe) {\n    buf = Buffer.allocUnsafe(len);\n  } else {\n    buf = Buffer.from(len);\n  }\n  val.copy(buf);\n  return buf;\n}\nfunction cloneSymbol(val) {\n  if (Symbol.prototype.valueOf) {\n    return Object(Symbol.prototype.valueOf.call(val));\n  }\n  return {};\n}\nfunction isBuffer(obj) {\n  return (\n    obj !== null &&\n    Boolean(obj.constructor) &&\n    typeof obj.constructor.isBuffer === \"function\" &&\n    obj.constructor.isBuffer(obj)\n  );\n}\nfunction typeOf(val) {\n  if (typeof val === \"undefined\") {\n    return \"undefined\";\n  }\n  if (val === null) {\n    return \"null\";\n  }\n  if (val === true || val === false || val instanceof Boolean) {\n    return \"boolean\";\n  }\n  if (typeof val === \"string\" || val instanceof String) {\n    return \"string\";\n  }\n  if (typeof val === \"number\" || val instanceof Number) {\n    return \"number\";\n  }\n  if (typeof val === \"function\" || val instanceof Function) {\n    return \"function\";\n  }\n  if (typeof Array.isArray !== \"undefined\" && Array.isArray(val)) {\n    return \"array\";\n  }\n  if (val instanceof RegExp) {\n    return \"regexp\";\n  }\n  if (val instanceof Date) {\n    return \"date\";\n  }\n  var type = toString.call(val);\n  if (type === \"[object RegExp]\") {\n    return \"regexp\";\n  }\n  if (type === \"[object Date]\") {\n    return \"date\";\n  }\n  if (type === \"[object Arguments]\") {\n    return \"arguments\";\n  }\n  if (type === \"[object Error]\") {\n    return \"error\";\n  }\n  if (isBuffer(val)) {\n    return \"buffer\";\n  }\n  if (type === \"[object Set]\") {\n    return \"set\";\n  }\n  if (type === \"[object WeakSet]\") {\n    return \"weakset\";\n  }\n  if (type === \"[object Map]\") {\n    return \"map\";\n  }\n  if (type === \"[object WeakMap]\") {\n    return \"weakmap\";\n  }\n  if (type === \"[object Symbol]\") {\n    return \"symbol\";\n  }\n  if (type === \"[object Int8Array]\") {\n    return \"int8array\";\n  }\n  if (type === \"[object Uint8Array]\") {\n    return \"uint8array\";\n  }\n  if (type === \"[object Uint8ClampedArray]\") {\n    return \"uint8clampedarray\";\n  }\n  if (type === \"[object Int16Array]\") {\n    return \"int16array\";\n  }\n  if (type === \"[object Uint16Array]\") {\n    return \"uint16array\";\n  }\n  if (type === \"[object Int32Array]\") {\n    return \"int32array\";\n  }\n  if (type === \"[object Uint32Array]\") {\n    return \"uint32array\";\n  }\n  if (type === \"[object Float32Array]\") {\n    return \"float32array\";\n  }\n  if (type === \"[object Float64Array]\") {\n    return \"float64array\";\n  }\n  return \"object\";\n}\nfunction isObject(obj) {\n  return typeof obj === \"object\" && obj !== null;\n}\nfunction isObjectObject(obj) {\n  return isObject(obj) === true && Object.prototype.toString.call(obj) === \"[object Object]\";\n}\nfunction isPlainObject(obj) {\n  let ctor;\n  let prototype;\n  if (isObjectObject(obj) === false) {\n    return false;\n  }\n  ctor = obj.constructor;\n  if (typeof ctor !== \"function\") {\n    return false;\n  }\n  prototype = ctor.prototype;\n  if (isObjectObject(prototype) === false) {\n    return false;\n  }\n  // eslint-disable-next-line no-prototype-builtins\n  return prototype.hasOwnProperty(\"isPrototypeOf\") !== false;\n}\nfunction cloneDeep(val, instanceClone) {\n  switch (typeOf(val)) {\n    case \"object\":\n      return cloneObjectDeep(val, instanceClone);\n    case \"array\":\n      return cloneArrayDeep(val, instanceClone);\n    default: {\n      return clone(val);\n    }\n  }\n}\nfunction cloneObjectDeep(val, instanceClone) {\n  if (typeof instanceClone === \"function\") {\n    return instanceClone(val);\n  }\n  if (instanceClone || isPlainObject(val)) {\n    const res = new val.constructor();\n    for (let key in val) {\n      res[key] = cloneDeep(val[key], instanceClone);\n    }\n    return res;\n  }\n  return val;\n}\nfunction cloneArrayDeep(val, instanceClone) {\n  const res = new val.constructor(val.length);\n  for (let index = 0; index < val.length; index++) {\n    res[index] = cloneDeep(val[index], instanceClone);\n  }\n  return res;\n}\nexport default cloneDeep;\n","import cloneDeep from \"./cloneDeep\";\nimport isPrimitive from \"../check/isPrimitive\";\n\n/**\n * @name clone\n * @param {*} value\n * @returns {*}\n */\nexport default function clone(value) {\n  if (isPrimitive(value)) {\n    return value;\n  }\n  return cloneDeep(value);\n}\n","/**\n * @name isPrimitive\n * @description Return true on boolean, string, number, BigInt, null, Symbol and undefined\n * @param {*} value\n * @return {boolean}\n */\nexport default function isPrimitive(value) {\n  return Object(value) !== value;\n}\n","import isObjectLike from \"../../util/check/isObjectLike\";\n\n/**\n * @name defaultsConfig\n * @throws TypeError\n * @param {Object.<string, *>} propertyDefaultValues\n * @returns {Object}\n */\nexport default function defaultsConfig(propertyDefaultValues) {\n  if (!isObjectLike(propertyDefaultValues)) {\n    throw new TypeError(\"'Defaults' should be an object\");\n  }\n  return propertyDefaultValues;\n}\n","import isObjectEmpty from \"../../util/check/isObjectEmpty\";\n\n/**\n * @name defaultsData\n * @param {Object.<string, *>} propertyDefaultValues\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function defaultsData(propertyDefaultValues, dataToSerialize) {\n  if (isObjectEmpty(propertyDefaultValues)) {\n    return dataToSerialize;\n  }\n  Object.keys(propertyDefaultValues).forEach((key) => {\n    if (!(key in dataToSerialize) || dataToSerialize[key] === undefined) {\n      dataToSerialize[key] = propertyDefaultValues[key];\n    }\n  });\n  return dataToSerialize;\n}\n","/**\n * @name arrayUnique\n * @param {Array} array\n * @param {boolean=} sort\n * @returns {Array}\n */\nexport default function arrayUnique(array, sort = true) {\n  if (array.length < 2) {\n    return array;\n  }\n  let unique = [...new Set(array)];\n  if (unique.includes(0)) {\n    const zeroes = array.filter((value) => value === 0);\n    if (zeroes.length > 1 && zeroes.some((value) => 1 / value === Number.NEGATIVE_INFINITY)) {\n      unique.push(-0);\n    }\n  }\n  if (unique.filter((value) => typeof value === \"string\").length) {\n    const strings = array.filter((value) => typeof value === \"string\");\n    if (strings.length > 1) {\n      const normalized = [...new Set(strings.map((value) => value.normalize()))];\n      normalized.forEach((value) => {\n        delete unique[unique.indexOf(value)];\n      });\n      const compacted = [];\n      for (let index = 0; index < unique.length; index += 1) {\n        if (index in unique) {\n          compacted.push(unique[index]);\n        }\n      }\n      unique = compacted.concat(normalized);\n    }\n  }\n  if (sort) {\n    return unique.sort();\n  }\n  return unique;\n}\n","/**\n * name isArrayEmpty\n * @param {Array} array\n * @returns {boolean}\n */\nexport default function isArrayEmpty(array) {\n  return array.length === 0;\n}\n","import arrayUnique from \"../../util/array/unique\";\nimport isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport isString from \"../../util/is/isString\";\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name definedConfig\n * @throws TypeError\n * @param {Array.<string>} propertiesMustBeDefined\n * @returns {Array.<string>}\n */\nexport default function definedConfig(propertiesMustBeDefined) {\n  if (!Array.isArray(propertiesMustBeDefined)) {\n    throw new TypeError(\"'Defined' should be an array\");\n  }\n  if (isArrayEmpty(propertiesMustBeDefined)) {\n    return [];\n  }\n  return arrayUnique(propertiesMustBeDefined).map((value) => {\n    if (!isString(value)) {\n      throw new TypeError(`'Defined' expect array of strings. Value: '${jsonStringify(value)}'.`);\n    }\n    return value;\n  });\n}\n","import definedConfig from \"./definedConfig\";\nimport isArrayEmpty from \"../../util/check/isArrayEmpty\";\n\n/**\n * @name definedData\n * @throws TypeError\n * @param {Array.<string>} propertiesMustBeDefined\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function definedData(propertiesMustBeDefined, dataToSerialize) {\n  const config = definedConfig(propertiesMustBeDefined);\n  if (isArrayEmpty(config)) {\n    return dataToSerialize;\n  }\n  config.forEach((key) => {\n    if (!(key in dataToSerialize)) {\n      throw new Error(`Field '${key}' must be defined.`);\n    }\n    if (dataToSerialize[key] === undefined) {\n      throw new Error(`Field '${key}' should have value.`);\n    }\n  });\n  return dataToSerialize;\n}\n","/**\n * @name isRegExp\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isRegExp(value) {\n  return value instanceof RegExp;\n}\n","import arrayUnique from \"../../util/array/unique\";\nimport isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport isRegExp from \"../../util/is/isRegExp\";\nimport isString from \"../../util/is/isString\";\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name excludeConfig\n * @throws TypeError\n * @param {Array.<string|RegExp>} propertiesToExclude\n * @returns {Array.<string|RegExp>}\n */\nexport default function excludeConfig(propertiesToExclude) {\n  if (!Array.isArray(propertiesToExclude)) {\n    throw new TypeError(\"'Exclude' should be an array\");\n  }\n  if (isArrayEmpty(propertiesToExclude)) {\n    return [];\n  }\n  return arrayUnique(propertiesToExclude).map((value) => {\n    if (!isString(value) && !isRegExp(value)) {\n      throw new TypeError(\n        `'Exclude' expect array of strings or regular expressions. Value: '${jsonStringify(value)}'.`,\n      );\n    }\n    return value;\n  });\n}\n","import arrayUnique from \"../../util/array/unique\";\nimport isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport isString from \"../../util/is/isString\";\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name omitConfig\n * @throws TypeError\n * @param {Array.<string>} propertiesToOmit\n * @returns {Array.<string>}\n */\nexport default function omitConfig(propertiesToOmit) {\n  if (!Array.isArray(propertiesToOmit)) {\n    throw new TypeError(\"'Omit' should be an array\");\n  }\n  if (isArrayEmpty(propertiesToOmit)) {\n    return [];\n  }\n  return arrayUnique(propertiesToOmit).map((value) => {\n    if (!isString(value)) {\n      throw new TypeError(`'Omit' expect array of strings. Value: '${jsonStringify(value)}'.`);\n    }\n    return value;\n  });\n}\n","import arrayUnique from \"../../util/array/unique\";\nimport isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport isString from \"../../util/is/isString\";\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name orderConfig\n * @throws TypeError\n * @param {Array.<string>} propertiesToStreamline\n * @returns {Array.<string>}\n */\nexport default function orderConfig(propertiesToStreamline) {\n  if (!Array.isArray(propertiesToStreamline)) {\n    throw new TypeError(\"'Order' should be an array\");\n  }\n  if (isArrayEmpty(propertiesToStreamline)) {\n    return [];\n  }\n  return arrayUnique(propertiesToStreamline, false).map((value) => {\n    if (!isString(value)) {\n      throw new TypeError(`'Order' expect array of strings. Value: '${jsonStringify(value)}'.`);\n    }\n    return value;\n  });\n}\n","import CONFIG_SORT from \"../../const/configSort\";\n\n/**\n * @name objectOrderKeys\n * @param {Object} object\n * @param {Array.<string>} keys\n * @param {boolean=} sortAlphabetically\n * @returns {{}|*}\n */\nexport default function objectOrderKeys(object, keys = [], sortAlphabetically = CONFIG_SORT) {\n  if (!Array.isArray(keys) || keys.length === 0) {\n    return object;\n  }\n  const orderKeys = keys.filter((key) => typeof key === \"string\");\n  let objectKeys = new Set(Object.keys(object));\n  const newObject = {};\n  orderKeys.forEach((key) => {\n    objectKeys.delete(key);\n    if (key in object) {\n      newObject[key] = object[key];\n    }\n  });\n  objectKeys = [...objectKeys];\n  if (sortAlphabetically) {\n    objectKeys = objectKeys.sort((alpha, beta) => alpha.localeCompare(beta));\n  }\n  objectKeys.forEach((key) => (newObject[key] = object[key]));\n  return newObject;\n}\n","import arrayUnique from \"../../util/array/unique\";\nimport isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport isString from \"../../util/is/isString\";\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name pickConfig\n * @throws TypeError\n * @param {Array.<string>} propertiesToPick\n * @returns {Array.<string>}\n */\nexport default function pickConfig(propertiesToPick) {\n  if (!Array.isArray(propertiesToPick)) {\n    throw new TypeError(\"'Pick' should be an array\");\n  }\n  if (isArrayEmpty(propertiesToPick)) {\n    return [];\n  }\n  return arrayUnique(propertiesToPick).map((value) => {\n    if (!isString(value)) {\n      throw new TypeError(`'Pick' expect array of strings. Value: '${jsonStringify(value)}'.`);\n    }\n    return value;\n  });\n}\n","import isArrayEmpty from \"../../util/check/isArrayEmpty\";\n\n/**\n * @name pickData\n * @param {Array.<string>} propertiesToPick\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function pickData(propertiesToPick, dataToSerialize) {\n  if (isArrayEmpty(propertiesToPick)) {\n    return dataToSerialize;\n  }\n  const newCache = {};\n  Object.keys(dataToSerialize).forEach((key) => {\n    if (propertiesToPick.includes(key)) {\n      newCache[key] = dataToSerialize[key];\n    }\n  });\n  return newCache;\n}\n","import arrayUnique from \"../../util/array/unique\";\nimport isObjectEmpty from \"../../util/check/isObjectEmpty\";\nimport isObjectLike from \"../../util/check/isObjectLike\";\nimport isString from \"../../util/is/isString\";\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name renameConfig\n * @throws TypeError\n * @param {Object.<string, string>} renamePropertyFromTo\n * @returns {Object}\n */\nexport default function renameConfig(renamePropertyFromTo) {\n  if (!isObjectLike(renamePropertyFromTo)) {\n    throw new TypeError(\"'Rename' should be an object\");\n  }\n  if (isObjectEmpty(renamePropertyFromTo)) {\n    return {};\n  }\n  Object.keys(renamePropertyFromTo).forEach((key) => {\n    if (!isString(key)) {\n      throw new TypeError(`'Rename' expect object values to be strings. Not a string at key: '${key}'.`);\n    }\n  });\n  const to = Object.values(renamePropertyFromTo);\n  const toUnique = arrayUnique(to);\n  if (to.length !== toUnique.length) {\n    throw new TypeError(`'Rename' has similar values: '${jsonStringify(toUnique)}'.`);\n  }\n  return renamePropertyFromTo;\n}\n","import isObjectEmpty from \"../../util/check/isObjectEmpty\";\n\n/**\n * @name renameData\n * @param {Object.<string, string>} renamePropertyFromTo\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function renameData(renamePropertyFromTo, dataToSerialize) {\n  if (isObjectEmpty(renamePropertyFromTo)) {\n    return dataToSerialize;\n  }\n  const renameFrom = Object.keys(renamePropertyFromTo).sort((alpha, beta) => alpha.localeCompare(beta));\n  const renamedData = {};\n  renameFrom.forEach((key) => {\n    if (!(key in dataToSerialize)) {\n      throw new Error(`Field '${key}' suppose to be renamed.`);\n    }\n    renamedData[renamePropertyFromTo[key]] = dataToSerialize[key];\n  });\n  renameFrom.forEach((key) => {\n    delete dataToSerialize[key];\n  });\n  Object.assign(dataToSerialize, renamedData);\n  return dataToSerialize;\n}\n","import isObjectLike from \"../../util/check/isObjectLike\";\n\n/**\n * @name replaceConfig\n * @throws TypeError\n * @param {Object.<string, *>} replacePropertyValues\n * @returns {Object}\n */\nexport default function replaceConfig(replacePropertyValues) {\n  if (!isObjectLike(replacePropertyValues)) {\n    throw new TypeError(\"'Replace' should be an object\");\n  }\n  return replacePropertyValues;\n}\n","import isObjectEmpty from \"../../util/check/isObjectEmpty\";\n\n/**\n * @name replaceData\n * @param {Object.<string, *>} replacePropertyValues\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function replaceData(replacePropertyValues, dataToSerialize) {\n  if (isObjectEmpty(replacePropertyValues)) {\n    return dataToSerialize;\n  }\n  Object.keys(replacePropertyValues).forEach((key) => {\n    dataToSerialize[key] = replacePropertyValues[key];\n  });\n  return dataToSerialize;\n}\n","import arrayUnique from \"../../util/array/unique\";\nimport isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport isString from \"../../util/is/isString\";\nimport jsonStringify from \"../../util/json/stringify\";\n\n/**\n * @name requiredConfig\n * @throws TypeError\n * @param {Array.<string>} propertiesRequired\n * @returns {Array.<string>}\n */\nexport default function requiredConfig(propertiesRequired) {\n  if (!Array.isArray(propertiesRequired)) {\n    throw new TypeError(\"'Required' should be an array\");\n  }\n  if (isArrayEmpty(propertiesRequired)) {\n    return [];\n  }\n  return arrayUnique(propertiesRequired).map((value) => {\n    if (!isString(value)) {\n      throw new TypeError(`'Required' expect array of strings. Value: '${jsonStringify(value)}'.`);\n    }\n    return value;\n  });\n}\n","import isArrayEmpty from \"../../util/check/isArrayEmpty\";\n\n/**\n * @name requiredData\n * @param {Array.<string>} propertiesRequired\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function requiredData(propertiesRequired, dataToSerialize) {\n  if (isArrayEmpty(propertiesRequired)) {\n    return dataToSerialize;\n  }\n  propertiesRequired.forEach((key) => {\n    if (!(key in dataToSerialize)) {\n      throw new Error(`Field '${key}' is required.`);\n    }\n  });\n  return dataToSerialize;\n}\n","import isCallable from \"../../util/is/isCallable\";\nimport isObjectEmpty from \"../../util/check/isObjectEmpty\";\nimport isObjectLike from \"../../util/check/isObjectLike\";\n\n/**\n * @name transformConfig\n * @throws TypeError\n * @param {Object.<string, function>} propertyValueTransformWith\n * @returns {Object}\n */\nexport default function transformConfig(propertyValueTransformWith) {\n  if (!isObjectLike(propertyValueTransformWith)) {\n    throw new TypeError(\"'Transform' should be an object\");\n  }\n  if (isObjectEmpty(propertyValueTransformWith)) {\n    return {};\n  }\n  Object.keys(propertyValueTransformWith).forEach((key) => {\n    if (!isCallable(propertyValueTransformWith[key])) {\n      throw new TypeError(`'Transform' expect object values to be functions. Not a function at key: '${key}'.`);\n    }\n  });\n  return propertyValueTransformWith;\n}\n","/**\n * @name isCallable\n * @param {*} value\n * @returns {boolean}\n */\nimport isFunction from \"./isFunction.mjs\";\n\nexport default function isCallable(value) {\n  if (!value) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return true;\n  }\n  if (\n    typeof value === \"object\" &&\n    \"toFunction\" in value &&\n    isFunction(value.toFunction) &&\n    isFunction(value.toFunction())\n  ) {\n    return true;\n  }\n  return false;\n}\n","import clone from \"../../util/variable/clone\";\nimport isFunction from \"../../util/is/isFunction\";\nimport isObjectEmpty from \"../../util/check/isObjectEmpty\";\n\n/**\n * @name transformData\n * @param {Object.<string, function>} propertyValueTransformWith\n * @param {Object} dataToSerialize\n * @returns {Object}\n */\nexport default function transformData(propertyValueTransformWith, dataToSerialize) {\n  if (isObjectEmpty(propertyValueTransformWith)) {\n    return dataToSerialize;\n  }\n  Object.keys(propertyValueTransformWith).forEach((key) => {\n    if (!(key in dataToSerialize)) {\n      throw new Error(`Field '${key}' suppose to be transformed.`);\n    }\n    if (isFunction(propertyValueTransformWith[key])) {\n      dataToSerialize[key] = propertyValueTransformWith[key](dataToSerialize[key], key, clone(dataToSerialize));\n    } else {\n      // noinspection JSUnresolvedFunction\n      dataToSerialize[key] = propertyValueTransformWith[key].toFunction()(\n        dataToSerialize[key],\n        key,\n        clone(dataToSerialize),\n      );\n    }\n  });\n  return dataToSerialize;\n}\n","import CONFIG_FIELDS from \"../const/configFields\";\nimport CONFIG_SORT from \"../const/configSort\";\nimport arrayDiff from \"../util/array/diff\";\nimport arrayHasSame from \"../util/array/hasSame\";\nimport arrayIntersect from \"../util/array/intersect\";\nimport castConfig from \"./cast/castConfig\";\nimport castData from \"./cast/castData\";\nimport castToJson from \"../util/cast/toJson\";\nimport clone from \"../util/variable/clone\";\nimport defaultsConfig from \"./defaults/defaultsConfig\";\nimport defaultsData from \"./defaults/defaultsData\";\nimport definedConfig from \"./defined/definedConfig\";\nimport definedData from \"./defined/definedData\";\nimport excludeConfig from \"./exclude/excludeConfig\";\nimport excludeData from \"./exclude/excludeData\";\nimport isFunction from \"../util/is/isFunction\";\nimport isObjectLike from \"../util/check/isObjectLike\";\nimport jsonStringify from \"../util/json/stringify\";\nimport objectKeys from \"../util/object/keys\";\nimport omitConfig from \"./omit/omitConfig\";\nimport omitData from \"./omit/omitData\";\nimport orderConfig from \"./order/orderConfig\";\nimport orderData from \"./order/orderData\";\nimport pickConfig from \"./pick/pickConfig\";\nimport pickData from \"./pick/pickData\";\nimport renameConfig from \"./rename/renameConfig\";\nimport renameData from \"./rename/renameData\";\nimport replaceConfig from \"./replace/replaceConfig\";\nimport replaceData from \"./replace/replaceData\";\nimport requiredConfig from \"./required/requiredConfig\";\nimport requiredData from \"./required/requiredData\";\nimport transformConfig from \"./transform/transformConfig\";\nimport transformData from \"./transform/transformData\";\n\nexport default class Vicis {\n  //#region Config Fields\n  /**\n   * @name cast\n   * @private\n   * @type {Object}\n   */\n  #cast = {};\n  /**\n   * @name defaults\n   * @private\n   * @type {Object}\n   */\n  #defaults = [];\n  /**\n   * @name defined\n   * @private\n   * @type {Array.<string>}\n   */\n  #defined = [];\n  /**\n   * @name exclude\n   * @private\n   * @type {Array.<string|RegExp>}\n   */\n  #exclude = [];\n  /**\n   * @name omit\n   * @private\n   * @type {Array.<string>}\n   */\n  #omit = [];\n  /**\n   * @name order\n   * @private\n   * @type {Array.<string>}\n   */\n  #order = [];\n  /**\n   * @name pick\n   * @private\n   * @type {Array.<string>}\n   */\n  #pick = [];\n  /**\n   * @name sort\n   * @private\n   * @type {boolean}\n   */\n  #sort = CONFIG_SORT;\n  /**\n   * @name rename\n   * @private\n   * @type {Object}\n   */\n  #rename = {};\n  /**\n   * @name replace\n   * @private\n   * @type {Object}\n   */\n  #replace = {};\n  /**\n   * @name required\n   * @private\n   * @type {Array.<string>}\n   */\n  #required = [];\n  /**\n   * @name transform\n   * @private\n   * @type {Object}\n   */\n  #transform = {};\n  //#endregion\n\n  //#region Data Fields\n  /**\n   * @name dataCache\n   * @private\n   * @type {Object}\n   */\n  #dataCache = {};\n  /**\n   * @name dataOriginal\n   * @private\n   * @type {Object}\n   */\n  #dataOriginal = undefined;\n  //#endregion\n\n  //#region Private Methods\n  /**\n   * @name validateConfig\n   * @private\n   * @method\n   * @throws Error\n   * @returns {Vicis}\n   */\n  #validateConfig;\n  /**\n   * @name validateData\n   * @private\n   * @method\n   * @throws Error\n   * @returns {Vicis}\n   */\n  #validateData;\n  //#endregion\n\n  //#region Initialization Methods\n  /**\n   * @name constructor\n   * @public\n   * @constructor\n   * @param {Object=} config\n   * @param {Object=} data\n   */\n  constructor(config = {}, data) {\n    /**\n     * @name validateConfig\n     * @private\n     * @method\n     * @throws Error\n     * @returns {Vicis}\n     */\n    this.#validateConfig = function validateConfig() {\n      const cast = objectKeys(this.#cast);\n      const rename = objectKeys(this.#rename);\n      const replace = objectKeys(this.#replace);\n      const transform = objectKeys(this.#transform);\n      if (arrayHasSame(this.#omit, cast)) {\n        throw new Error(`'omit' has same keys as 'cast': ${arrayIntersect(this.#omit, cast)}.`);\n      }\n      if (arrayHasSame(this.#omit, this.#defined)) {\n        throw new Error(`'omit' has same keys as 'defined': ${arrayIntersect(this.#omit, this.#defined)}.`);\n      }\n      if (arrayHasSame(this.#omit, this.#pick)) {\n        throw new Error(`'omit' has same keys as 'pick': ${arrayIntersect(this.#omit, this.#pick)}.`);\n      }\n      if (arrayHasSame(this.#omit, rename)) {\n        throw new Error(`'omit' has same keys as 'rename': ${arrayIntersect(this.#omit, rename)}.`);\n      }\n      if (arrayHasSame(this.#omit, replace)) {\n        throw new Error(`'omit' has same keys as 'replace': ${arrayIntersect(this.#omit, replace)}.`);\n      }\n      if (arrayHasSame(this.#omit, this.#required)) {\n        throw new Error(`'omit' has same keys as 'required': ${arrayIntersect(this.#omit, this.#required)}.`);\n      }\n      if (arrayHasSame(this.#omit, transform)) {\n        throw new Error(`'omit' has same keys as 'transform': ${arrayIntersect(this.#omit, transform)}.`);\n      }\n      if (arrayHasSame(this.#omit, transform)) {\n        throw new Error(`'omit' has same keys as 'transform': ${arrayIntersect(this.#omit, transform)}.`);\n      }\n      if (arrayHasSame(cast, replace)) {\n        throw new Error(`'cast' has same keys as 'replace': ${arrayIntersect(cast, replace)}.`);\n      }\n      if (arrayHasSame(cast, transform)) {\n        throw new Error(`'cast' has same keys as 'transform': ${arrayIntersect(cast, transform)}.`);\n      }\n      if (arrayHasSame(replace, transform)) {\n        throw new Error(`'replace' has same keys as 'transform': ${arrayIntersect(replace, transform)}.`);\n      }\n      return this;\n    }.bind(this);\n    /**\n     * @name validateData\n     * @private\n     * @method\n     * @throws Error\n     * @returns {Vicis}\n     */\n    this.#validateData = function validateData() {\n      if (this.#dataOriginal === undefined) {\n        return this;\n      }\n      if (\"toObject\" in this.#dataOriginal && isFunction(this.#dataOriginal.toObject)) {\n        this.#dataCache = this.#dataOriginal.toObject();\n      } else if (\"toJSON\" in this.#dataOriginal && isFunction(this.#dataOriginal.toJSON)) {\n        this.#dataCache = this.#dataOriginal.toJSON();\n      } else {\n        this.#dataCache = this.#dataOriginal;\n      }\n      this.#dataCache = omitData(this.#omit, this.#dataCache);\n      this.#dataCache = requiredData(this.#required, this.#dataCache);\n      this.#dataCache = definedData(this.#defined, this.#dataCache);\n      this.#dataCache = castData(this.#cast, this.#dataCache);\n      this.#dataCache = transformData(this.#transform, this.#dataCache);\n      this.#dataCache = replaceData(this.#replace, this.#dataCache);\n      this.#dataCache = renameData(this.#rename, this.#dataCache);\n      this.#dataCache = defaultsData(this.#defaults, this.#dataCache);\n      this.#dataCache = pickData(this.#pick, this.#dataCache);\n      this.#dataCache = excludeData(this.#exclude, this.#dataCache);\n      this.#dataCache = castToJson(this.#dataCache, this.#sort);\n      this.#dataCache = orderData(this.#order, this.#dataCache, this.#sort);\n      return this;\n    }.bind(this);\n    this.config(config);\n    if (data !== undefined) {\n      this.data(data);\n    }\n  }\n  //#endregion\n\n  //#region Static Methods\n  /**\n   * @name factory\n   * @public\n   * @static\n   * @factory\n   * @param {Object=} config\n   * @param {Object=} data\n   * @returns {Vicis}\n   */\n  static factory(config = {}, data) {\n    return new Vicis(config, data);\n  }\n  /**\n   * @name BOOLEAN\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get BOOLEAN() {\n    return \"boolean\";\n  }\n  /**\n   * @name FLAG\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get FLAG() {\n    return \"flag\";\n  }\n  /**\n   * @name NUMERIC\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get NUMERIC() {\n    return \"numeric\";\n  }\n  /**\n   * @name INTEGER\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get INTEGER() {\n    return \"integer\";\n  }\n  /**\n   * @name STRING\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get STRING() {\n    return \"string\";\n  }\n  /**\n   * @name JSON\n   * @public\n   * @static\n   * @type {String}\n   */\n  static get JSON() {\n    return \"json\";\n  }\n  //#endregion\n\n  //#region Public Config Methods\n  /**\n   * @name getConfig\n   * @public\n   * @returns {Object}\n   */\n  getConfig() {\n    return clone({\n      cast: this.#cast,\n      defaults: this.#defaults,\n      defined: this.#defined,\n      exclude: this.#exclude,\n      omit: this.#omit,\n      order: this.#order,\n      pick: this.#pick,\n      sort: this.#sort,\n      rename: this.#rename,\n      replace: this.#replace,\n      required: this.#required,\n      transform: this.#transform,\n    });\n  }\n  /**\n   * @name resetConfig\n   * @public\n   * @returns {Vicis}\n   */\n  resetConfig() {\n    this.#cast = {};\n    this.#defaults = {};\n    this.#defined = [];\n    this.#exclude = [];\n    this.#omit = [];\n    this.#order = [];\n    this.#pick = [];\n    this.#sort = CONFIG_SORT;\n    this.#rename = {};\n    this.#replace = {};\n    this.#required = [];\n    this.#transform = {};\n    return this;\n  }\n  /**\n   * @name config\n   * @public\n   * @throws TypeError\n   * @param {Object=} config\n   * @returns {Vicis}\n   */\n  config(config = {}) {\n    if (!isObjectLike(config)) {\n      throw new TypeError(\"Config should be an object\");\n    }\n    const diff = arrayDiff(objectKeys(config), CONFIG_FIELDS);\n    if (diff.length) {\n      throw new TypeError(`Config has unknown fields: '${diff.join(\"', '\")}'.`);\n    }\n    this.resetConfig();\n    this.sort(config.sort);\n    this.omit(config.omit);\n    this.cast(config.cast);\n    this.defined(config.defined);\n    this.pick(config.pick);\n    this.rename(config.rename);\n    this.replace(config.replace);\n    this.required(config.required);\n    this.transform(config.transform);\n    this.defaults(config.defaults);\n    this.exclude(config.exclude);\n    this.order(config.order);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name cast\n   * @public\n   * @throws TypeError\n   * @param {Object=} propertyToType\n   * @returns {Vicis}\n   */\n  cast(propertyToType = {}) {\n    this.#cast = castConfig(propertyToType);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name defaults\n   * @public\n   * @throws TypeError\n   * @param {Object=} propertyDefaultValues\n   * @returns {Vicis}\n   */\n  defaults(propertyDefaultValues = {}) {\n    this.#defaults = defaultsConfig(propertyDefaultValues); // do not deep clone!\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name defined\n   * @public\n   * @throws TypeError\n   * @param {Array.<string>=} propertiesMustBeDefined\n   * @returns {Vicis}\n   */\n  defined(propertiesMustBeDefined = []) {\n    this.#defined = definedConfig(propertiesMustBeDefined);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name exclude\n   * @public\n   * @throws TypeError\n   * @param {Array.<string|RegExp>=} propertiesToExclude\n   * @returns {Vicis}\n   */\n  exclude(propertiesToExclude = []) {\n    this.#exclude = excludeConfig(propertiesToExclude);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name omit\n   * @public\n   * @throws TypeError\n   * @param {Array.<string>=} propertiesToOmit\n   * @returns {Vicis}\n   */\n  omit(propertiesToOmit = []) {\n    this.#omit = omitConfig(propertiesToOmit);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name order\n   * @public\n   * @throws TypeError\n   * @param {Array.<string>=} propertiesToStreamline\n   * @returns {Vicis}\n   */\n  order(propertiesToStreamline = []) {\n    this.#order = orderConfig(propertiesToStreamline);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name pick\n   * @public\n   * @throws TypeError\n   * @param {Array.<string>=} propertiesToPick\n   * @returns {Vicis}\n   */\n  pick(propertiesToPick = []) {\n    this.#pick = pickConfig(propertiesToPick);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name rename\n   * @public\n   * @throws TypeError\n   * @param {Object=} renamePropertyFromTo\n   * @returns {Vicis}\n   */\n  rename(renamePropertyFromTo = {}) {\n    this.#rename = renameConfig(renamePropertyFromTo);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name replace\n   * @public\n   * @throws TypeError\n   * @param {Object=} replacePropertyValues\n   * @returns {Vicis}\n   */\n  replace(replacePropertyValues = {}) {\n    this.#replace = replaceConfig(replacePropertyValues); // do not deep clone!\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name required\n   * @public\n   * @throws TypeError\n   * @param {Array.<string>=} propertiesRequired\n   * @returns {Vicis}\n   */\n  required(propertiesRequired = []) {\n    this.#required = requiredConfig(propertiesRequired);\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name sort\n   * @public\n   * @throws TypeError\n   * @param {boolean=} sortProperties\n   * @returns {Vicis}\n   */\n  sort(sortProperties = CONFIG_SORT) {\n    if (typeof sortProperties !== \"boolean\") {\n      throw new TypeError(\"'sort' should be a boolean\");\n    }\n    this.#sort = sortProperties;\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name transform\n   * @public\n   * @throws TypeError\n   * @param {Object=} propertyValueTransformWith\n   * @returns {Vicis}\n   */\n  transform(propertyValueTransformWith = {}) {\n    this.#transform = transformConfig(propertyValueTransformWith); // do not deep clone!\n    this.#validateConfig();\n    this.#validateData();\n    return this;\n  }\n  //#endregion\n\n  //#region Public Data Methods\n  /**\n   * @name getData\n   * @public\n   * @returns {Object}\n   */\n  getData() {\n    return clone(this.#dataCache);\n  }\n  /**\n   * @name data\n   * @public\n   * @throws TypeError\n   * @param {Object} dataToSerialize\n   * @returns {Vicis}\n   */\n  data(dataToSerialize) {\n    if (!isObjectLike(dataToSerialize)) {\n      throw new TypeError(\"Data should be an object\");\n    }\n    this.#dataOriginal = dataToSerialize; // keep reference\n    this.#validateData();\n    return this;\n  }\n  /**\n   * @name clear\n   * @description Clear any data references and cached values\n   * @public\n   * @returns {Vicis}\n   */\n  clear() {\n    this.#dataCache = {};\n    this.#dataOriginal = undefined;\n    return this;\n  }\n  //#endregion\n\n  //#region Public Main Methods\n  /**\n   * @name toJSON\n   * @public\n   * @returns {Object}\n   */\n  toJSON() {\n    return this.getData();\n  }\n  /**\n   * @name toString\n   * @public\n   * @returns {string}\n   */\n  toString() {\n    return jsonStringify(this.toJSON());\n  }\n  /**\n   * @name fromArray\n   * @public\n   * @param {Array.<Object>} collection\n   * @returns {Array.<Object>}\n   */\n  fromArray(collection) {\n    return Array.from(collection).map((data) => this.data(data).toJSON());\n  }\n  //#endregion\n}\n","import isArrayEmpty from \"../../util/check/isArrayEmpty\";\n\n/**\n * @name omitData\n * @param {Array.<string>} propertiesToOmit\n * @param {Object} data\n * @returns {Object}\n */\nexport default function omitData(propertiesToOmit, data) {\n  if (isArrayEmpty(propertiesToOmit)) {\n    return data;\n  }\n  const dataToSerialize = {};\n  Object.keys(data).forEach((key) => {\n    if (propertiesToOmit.includes(key)) {\n      return;\n    }\n    dataToSerialize[key] = data[key];\n  });\n  return dataToSerialize;\n}\n","import isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport isRegExp from \"../../util/is/isRegExp\";\nimport isString from \"../../util/is/isString\";\nimport objectKeys from \"../../util/object/keys\";\n\n/**\n * @name excludeData\n * @param {Array.<string|RegExp>} propertiesToExclude\n * @param {Object} data\n * @returns {Object}\n */\nexport default function excludeData(propertiesToExclude, data) {\n  if (isArrayEmpty(propertiesToExclude)) {\n    return data;\n  }\n  const excludeString = propertiesToExclude.filter(isString);\n  if (excludeString.length) {\n    Object.keys(data).forEach((key) => {\n      if (excludeString.includes(key)) {\n        delete data[key];\n      }\n    });\n  }\n  const keys = objectKeys(data);\n  if (keys.length === 0) {\n    return data;\n  }\n  const excludeRegExp = propertiesToExclude.filter(isRegExp);\n  if (excludeRegExp.length) {\n    excludeRegExp.forEach((reg) => {\n      Object.keys(data).forEach((key) => {\n        if (reg.test(key)) {\n          delete data[key];\n        }\n      });\n    });\n  }\n  return data;\n}\n","import CONFIG_SORT from \"../../const/configSort\";\nimport isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport objectOrderKeys from \"../../util/object/orderKeys\";\n\n/**\n * @name orderData\n * @param {Array.<string>} propertiesToStreamline\n * @param {Object} data\n * @param {boolean=} sort\n * @returns {Object}\n */\nexport default function orderData(propertiesToStreamline, data, sort = CONFIG_SORT) {\n  if (isArrayEmpty(propertiesToStreamline)) {\n    return data;\n  }\n  return objectOrderKeys(data, propertiesToStreamline, sort);\n}\n","/**\n * @name arrayDiff\n * @param {Array} alpha\n * @param {Array} beta\n * @returns {Array}\n */\nexport default function arrayDiff(alpha, beta) {\n  const set = new Set(beta);\n  return alpha.filter((value) => !set.has(value));\n}\n","import castConfig from \"./castConfig\";\nimport castData from \"./castData\";\nimport isObjectEmpty from \"../../util/check/isObjectEmpty\";\n\n/**\n * @name cast\n * @throws TypeError\n * @param {Object} data\n * @param {Object.<string, string>=} propertyToType\n * @returns {Object}\n */\nexport default function cast(data, propertyToType = {}) {\n  const config = castConfig(propertyToType);\n  if (isObjectEmpty(config)) {\n    return data;\n  }\n  return castData(config, data);\n}\n","import defaultsConfig from \"./defaultsConfig\";\nimport defaultsData from \"./defaultsData\";\nimport isObjectEmpty from \"../../util/check/isObjectEmpty\";\n\n/**\n * @name defaults\n * @throws TypeError\n * @param {Object} data\n * @param {Object.<string, *>=} propertyDefaultValues\n * @returns {Object}\n */\nexport default function defaults(data, propertyDefaultValues = {}) {\n  const config = defaultsConfig(propertyDefaultValues);\n  if (isObjectEmpty(config)) {\n    return data;\n  }\n  return defaultsData(propertyDefaultValues, data);\n}\n","import isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport definedData from \"./definedData\";\n\n/**\n * @name defined\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string>=} propertiesMustBeDefined\n * @returns {Object}\n */\nexport default function defined(data, propertiesMustBeDefined = []) {\n  if (isArrayEmpty(propertiesMustBeDefined)) {\n    return data;\n  }\n  return definedData(propertiesMustBeDefined, data);\n}\n","import excludeConfig from \"./excludeConfig\";\nimport isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport isRegExp from \"../../util/is/isRegExp\";\nimport isString from \"../../util/is/isString\";\nimport objectKeys from \"../../util/object/keys\";\n\n/**\n * @name exclude\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string|RegExp>=} propertiesToExclude\n * @returns {Object}\n */\nexport default function exclude(data, propertiesToExclude = []) {\n  const config = excludeConfig(propertiesToExclude);\n  if (isArrayEmpty(config)) {\n    return data;\n  }\n  const excludeString = config.filter(isString);\n  if (excludeString.length) {\n    Object.keys(data).forEach((key) => {\n      if (excludeString.includes(key)) {\n        delete data[key];\n      }\n    });\n  }\n  const keys = objectKeys(data);\n  if (keys.length === 0) {\n    return data;\n  }\n  const excludeRegExp = config.filter(isRegExp);\n  if (excludeRegExp.length) {\n    excludeRegExp.forEach((reg) => {\n      Object.keys(data).forEach((key) => {\n        if (reg.test(key)) {\n          delete data[key];\n        }\n      });\n    });\n  }\n  return data;\n}\n","import isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport omitConfig from \"./omitConfig\";\n\n/**\n * @name omit\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string>=} propertiesToOmit\n * @returns {Object}\n */\nexport default function omit(data, propertiesToOmit = []) {\n  const config = omitConfig(propertiesToOmit);\n  if (isArrayEmpty(config)) {\n    return data;\n  }\n  const dataToSerialize = {};\n  Object.keys(data).forEach((key) => {\n    if (config.includes(key)) {\n      return;\n    }\n    dataToSerialize[key] = data[key];\n  });\n  return dataToSerialize;\n}\n","import CONFIG_SORT from \"../../const/configSort\";\nimport isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport objectOrderKeys from \"../../util/object/orderKeys\";\nimport orderConfig from \"./orderConfig\";\n\n/**\n * @name order\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string>=} propertiesToStreamline\n * @param {boolean=} sort\n * @returns {Object}\n */\nexport default function order(data, propertiesToStreamline = [], sort = CONFIG_SORT) {\n  const config = orderConfig(propertiesToStreamline);\n  if (isArrayEmpty(config)) {\n    return data;\n  }\n  return objectOrderKeys(data, propertiesToStreamline, sort);\n}\n","import isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport pickConfig from \"./pickConfig\";\nimport pickData from \"./pickData\";\n\n/**\n * @name pick\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string>=} propertiesToPick\n * @returns {Object}\n */\nexport default function pick(data, propertiesToPick = []) {\n  const config = pickConfig(propertiesToPick);\n  if (isArrayEmpty(config)) {\n    return data;\n  }\n  return pickData(config, data);\n}\n","import isObjectEmpty from \"../../util/check/isObjectEmpty\";\nimport renameConfig from \"./renameConfig\";\nimport renameData from \"./renameData\";\n\n/**\n * @name rename\n * @param {Object} data\n * @param {Object.<string, string>=} renamePropertyFromTo\n * @returns {Object}\n */\nexport default function rename(data, renamePropertyFromTo = {}) {\n  const config = renameConfig(renamePropertyFromTo);\n  if (isObjectEmpty(config)) {\n    return data;\n  }\n  return renameData(config, data);\n}\n","import isObjectEmpty from \"../../util/check/isObjectEmpty\";\nimport replaceConfig from \"./replaceConfig\";\nimport replaceData from \"./replaceData\";\n\n/**\n * @name replace\n * @throws TypeError\n * @param {Object} data\n * @param {Object.<string, *>=} replacePropertyValues\n * @returns {Object}\n */\nexport default function replace(data, replacePropertyValues = {}) {\n  const config = replaceConfig(replacePropertyValues);\n  if (isObjectEmpty(config)) {\n    return data;\n  }\n  return replaceData(config, data);\n}\n","import isArrayEmpty from \"../../util/check/isArrayEmpty\";\nimport requiredConfig from \"./requiredConfig\";\nimport requiredData from \"./requiredData\";\n\n/**\n * @name required\n * @throws TypeError\n * @param {Object} data\n * @param {Array.<string>=} propertiesRequired\n * @returns {Object}\n */\nexport default function required(data, propertiesRequired = []) {\n  const config = requiredConfig(propertiesRequired);\n  if (isArrayEmpty(config)) {\n    return data;\n  }\n  return requiredData(config, data);\n}\n","import isObjectEmpty from \"../../util/check/isObjectEmpty\";\nimport transformConfig from \"./transformConfig\";\nimport transformData from \"./transformData\";\n\n/**\n * @name transform\n * @param {Object} data\n * @param {Object.<string, function>=} propertyValueTransformWith\n * @returns {Object}\n */\nexport default function transform(data, propertyValueTransformWith = {}) {\n  const config = transformConfig(propertyValueTransformWith);\n  if (isObjectEmpty(config)) {\n    return data;\n  }\n  return transformData(config, data);\n}\n"],"names":["TYPES_LIST","CONFIG_FIELDS","arrayHasSame","alpha","beta","length","setB","Set","filter","x","has","arrayIntersect","isObjectEmpty","object","Object","keys","isObjectLike","value","Array","isArray","isString","jsonStringify","JSON","stringify","castConfig","propertyToType","TypeError","forEach","key","includes","TYPES_ENUM","jsonParse","text","parse","isFunction","prototype","toString","call","objectToPlain","objectDeserialize","objectSerialize","data","toJSON","toObject","castData","dataToSerialize","castTo","Error","Boolean","toFlag","onEmpty","onUnParsable","affirmative","toLocaleLowerCase","trim","castedNumber","Number","isFinite","parsed","parseFloat","castedInteger","Math","trunc","objectKeys","sort","localeCompare","castToJson","collectionSortKeys","isDeep","reduce","sorted","clone","val","typeOf","slice","assign","constructor","Map","cloneBuffer","len","buf","Buffer","allocUnsafe","from","copy","cloneSymbol","Symbol","valueOf","cloneArrayBuffer","res","byteLength","Uint8Array","set","cloneTypedArray","buffer","byteOffset","cloneRegExp","flags","undefined","exec","re","source","lastIndex","create","String","Function","RegExp","Date","type","isBuffer","obj","isObjectObject","isObject","cloneDeep","instanceClone","cloneObjectDeep","isPlainObject","ctor","hasOwnProperty","cloneArrayDeep","index","isPrimitive","defaultsConfig","propertyDefaultValues","defaultsData","arrayUnique","array","unique","zeroes","some","NEGATIVE_INFINITY","push","strings","normalized","map","normalize","indexOf","compacted","concat","isArrayEmpty","definedConfig","propertiesMustBeDefined","definedData","config","isRegExp","excludeConfig","propertiesToExclude","omitConfig","propertiesToOmit","orderConfig","propertiesToStreamline","objectOrderKeys","sortAlphabetically","orderKeys","newObject","delete","pickConfig","propertiesToPick","pickData","newCache","renameConfig","renamePropertyFromTo","to","values","toUnique","renameData","renameFrom","renamedData","replaceConfig","replacePropertyValues","replaceData","requiredConfig","propertiesRequired","requiredData","transformConfig","propertyValueTransformWith","isCallable","toFunction","transformData","Vicis","validateConfig","cast","this","rename","replace","transform","bind","validateData","_classPrivateFieldGet","omitData","excludeData","excludeString","excludeRegExp","reg","test","orderData","getConfig","defaults","defined","exclude","omit","order","pick","required","resetConfig","diff","arrayDiff","join","sortProperties","getData","clear","fromArray","collection"],"mappings":"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"}